[{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":null,"dir":"","previous_headings":"","what":"Affects on the R package of the Patentsview API changes announced in 2021","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"(api-redesign.md navigation updated vignettes reference pages.)    “Let’s bicker argue killed ”.           Monty Python Holy Grail wasn’t sure githubby way page chronicles work done far, choices made along way still outstanding. Whether issues project, either repo parent’s debated, maybe find better way bicker! (properly discuss right way change R package.) maybe slug epic, one ages, pull request?","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"outstanding","dir":"","previous_headings":"","what":"Outstanding","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"changes comprising MVP masterfully merged onto ropensci crew102. ’s ’s left: original ropensci blog post updated added new vignette. new one converting existing script another new one api changes (navigation ). might pushing definition vignette slightly. problem recent API change broken , possibly irrevocably (assignee_lastknown_latitude/assignee_lastknown_longitude supposed come back API aren’t currently) possibly add qry_funs$in_range() r package paging’s parameter needs work - primary sort. use idea Patentsview Wrapper sends primary sort field api sorts dataframe returned. Change endpoints singular soft deprecate current plural ones? fieldsdf.R needs fixed work updated OpenAPI spec","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"questions","dir":"","previous_headings":"","what":"Questions:","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"warn message all_pages TRUE result set say million rows? update version number? Maybe 1.0.0 since ’s backward compatible. use r-universe distribution original API version retired? (submitted CRAN). unauthorized badge installation instructions ’d really use https://ropensci.r-universe.dev/ui#package:patentsview post tech note ropensci new version package ready? potential posting (stuff sticker dropped) add CONTRIBUTING.md issue template? best practices page recommends adding CONTRIBUTING.md API key instructions etc. also recommends adding issue template reminding people share API key. usethis::use_tidy_contributing() generates base CONTRIBUTING.md (links CODE_OF_CONDUCT.md delete link ropensci’s instead?) seen ? patft appft going away end September 2022. ropensci blog post vignette two patft links need updating. even sure first one winds pn 11,451,709!","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"important-notes","dir":"","previous_headings":"","what":"Important Notes","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"new endpoint, patent/otherreference/, mentioned OpenAPI object can’t get anything throw errors. returned entity, other_references, breaks singular/plural pattern. still API bugs, see test cases, several fail API bugs fixed","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"changes-here-not-in-pr-29--not-yet-in-mustberussmaster","dir":"","previous_headings":"","what":"Changes here not in PR 29 / not yet in mustberuss/master","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"upgraded build versions upgraded testthat 3e changed skipped tests working ones","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"required-further-reading","dir":"","previous_headings":"","what":"Required Further Reading:","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"(Keep reading, ’re prerequisites reading page) announcement API changes. new modified vignettes (use nav ). new modified test cases.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"favorable-api-changes","dir":"","previous_headings":"","what":"Favorable API Changes","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"API team produced Swagger UI page new version API! flaws ’s start something ’ve lobbying since launch API. aren’t familiar Swagger UI, ’s like online version Postman, preloaded use particular API. underlying Swagger/OpenAPI object comprehensively specify everything API capable , verbs, inputs, outputs errors. words, whole shebang done properly. underlying object can even imported Postman used input opensource projects, mentioned . new version API fields supposed quaryable. (Searching cpc fields test server’s patents endpoint currently broken.) bottom page, referring new Swagger UI page: > Please refer 200 “Response” section endpoint full list fields available. available fields “queryable.” API now returns non strings appropriate type, integer float. looks like now casting create R dates string dates received. couple exceptions ’ve opened bugs, like assignees_at_grant.type patents endpoint, ’s still string int","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"general-upheaval","dir":"","previous_headings":"","what":"General Upheaval","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"villagers may revolt API changes…      , R package become even useful relevant parade. size/per_page maximum single request changes 10,000 1,000. Maximum check message changed validate-args.R, throw warning per_page set 1,000 send API 1,000. lot fields seem gone away, like governmental interests ones. , , lists Discontinued Fields section page. swagger definition (https://search.patentsview.org/static/openapi.json) contain government interest fields, ipc fields, wipo fields, lawyer fields, foreign_priority fields, examiner fields, pct fields, raw inventor fields, coinventor fields, patent_firstnamed fields patent_num_claims. Assuming fields going away, though , unspecified, endpoints supposed coming end 2022. options matched_subentities_only include_subentity_total_counts seem gone away, don’t seem throw errors requested. R package probably throw error warning set, behavior old script may different user expects. https://patentsview.org/api-v01-information-page > Owing de-normalized split API design, sub-entity information available directly via endpoint. consequence, “matched_subentity” option parameters valid. attributes new names, like name_last nested inventor object returned patents endpoint. Now fields parameter specified “inventor.name_last” formerly “inventor_last_name” using patents endpoint name_last hitting assignees endpoint (comes back top level, within nested object). type changes attributes, affecting query methods used, contains vs test_any etc. organization (formerly string assignee_organization) now full text field. need confirm , seems fields now full text. Exceptions seem patents endpoint. uspc nber fields currently come back patents endpoint. Now real point call uspc nber endpoints. means way search patents using uspc nber fields. especially bad plant, design ressued patents. bulk cpc file contains assignments utility patents plant, design reissued patents searched classification system. ipc wipo fields seem gone away new version API. cited_patent citedby_patent fields longer can come back patents endpoint, instead new patent_citation endpoint needs called. Similarily, appcit_app fields come new application_citation endpoint.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"r-package-design-choices","dir":"","previous_headings":"","what":"R Package Design Choices","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"API key now required. best practices page said create environmental variable . environmental variable’s name, PATENTSVIEW_API_KEY, one used unadopted fork API’s python wrapper https://github.com/mustberuss/PatentsView-APIWrapper/tree/api-change-2022 patentsview API team made 13 endpoints singular, patent instead patents, returned data structures remain plural. R package continue use plural endpoint names match returned data structure going singular caused casting problems. also helps backward compatibility. API’s paging attribute names changed page per_page offset size. seemed best hide users. R package still use page per_page convert sending requests API. offset = (page-1) * per_page size = per_page Another API change makes default return size 100, 25. backward compatibility seemed like good idea leave default per_page 25 search-pv.R. Throttling imposed. http status 429 “many requests” returned 45 requests received per minute. Retry-header specify number seconds wait sending next request. search-pv sleeps required seconds (rather always Sys.sleep(3)) resends request hide change user. throw warning prints message changed. API change says POST requests need send JSON data (instead string representation JSON). Content-Type: application/json header added. seemed like good idea set per_page = 1000 all_pages == TRUE, minimizing API calls user left default size. added slighly wonky way suppress , paging test case can compare paged non paged results small result set. subdomain domain pattern endpoints changing. existing   https://api.patentsview.org/cpc_subsections/query?q= new   https://search.patentsview.org/api/v1/cpc_subsection/?q= ceiling calcuation changed similar changes process-resp.R data comes back different order . Now order iserror (boolean), count, total_hits, data used bedata, count, total_<endpoint>_count Also note total_hits comes back endpoints, previously endpoint specific return, like total_patent_count API now returns HATEOAS (Hypermedia Engine Application State) links retrieve information, example “inventor”: “https://search.patentsview.org/api/v1/inventor/252373/” (Clicking link result 403 Unauthorized - API key sent browser) Added retrieve_linked_data() retrieve data user, ’d pass full url. One odd thing, q:/query f:/fields paramters HATEOAS field names end _id returned without , example: patents endpoint query: ’s also example fields parameter specifies field ending _id field entity returned _id . Now new, get-convience endpoints take url parameter (HATEOAS links hit). R package ignores just uses ones posts gets using q,f,s o parameters, original version API . online documentation lagging. two new endpoints documented https://patentsview.org/data--action/whats-new-patentsview-july-2021 ’re missing Query column (fields queryable now). Pages endpoint haven’t changed yet. created fake pages data-raw/mbr_fieldsdf.R consume. ’re site control https://patentsview.historicip.com/api/. fake pages, “integer” fields get cast as_is “int” fields (integers still sent strings) get cast .integer. Update: documentation updated fields image. Ex https://patentsview.org/apis/api-endpoints/patentsbeta alternative scraping fake pages just mentioned, created data-raw/yml_extract.R try create csv parsing API’s Swagger definition. Update: data-raw/definition_extract.R parses new json Swagger definition. Now 3 15 endpoints searchable patent number, affected test cases. wound adding R/test-helpers.R generate test query per endpoint. Initially tests/testthat/helper-queries.R thought caused ubuntu-20.04 build failure. set API key asecret repo tests run vignettes can half rendered etc. ’s retrieved R-CMD-check.yaml. add dev = “png” knitr::opts_chunk$set citation-networks.Rmd.orig get render locally. See new vignette converting--existing-script.html#additions---r-package-1 wrote function uses API determine date ranges query returning 10,000 rows. think added R package, wasn’t sure ’s good idea.. singular endpoint name change, added following utils.R to_plural() to_singular() added inclusive qry_funs$in_range() try make easier users break queries, due decrease overall request size.","code":"library(patentsview)  query <- with_qfuns(text_phrase(assignees.assignee_organization = \"Johnson & Johnson\")) example <- search_pv(query=query, fields=c(\"assignees.assignee_id\"))  head(example$data$patents$assignees, 1) # [[1]] #                                                                              assignee #1 https://search.patentsview.org/api/v1/assignee/4cc92231-2f00-11ed-aea8-1234bde3cd05/ qry_funs$in_range(\"patent_date\"=c(\"2000-01-07\",\"2000-01-28\")) # {\"_and\":[{\"_gte\":{\"patent_date\":\"2000-01-07\"}},{\"_lte\":{\"patent_date\":\"2000-01-28\"}}]}>"},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"try-it-out-for-yourself","dir":"","previous_headings":"","what":"Try it out for yourself","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"Steps try locally 1. Request API key patentsview team https://patentsview.org/apis/keyrequest 2. Set environmental variable PATENTSVIEW_API_KEY value key. ex: set PATENTSVIEW_API_KEY=your_key_here (Windows) 3. Install patentsview package mustberuss’ api-redesign branch devtools::install_github(\"mustberuss/patentsview@api-redesign\")","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"https://patentsview.historicip.com/swagger/openapi.json (https://patentsview.historicip.com/swagger/openapi_v2.yml) can imported Postman give nicely loaded collection changed API. ’ll just need set global variable PVIEW_KEY set authorization’s value {{PVIEW_KEY}}. patentview team’s Swagger definition reported errors make importing problematic. swagger definition shows X-Status-Reason-Code addition existing X-Status-Reason. sure matters useful r package. doesn’t seem add anything useful. ~~~~ > print(httr::headers(resp)[[‘X-Status-Reason’]]) [1] “Invaild field: shoe_size” > print(httr::headers(resp)[[‘X-Status-Reason-Code’]]) [1] “ERR_Q” ~~~~ seems change case sensitivity compared original API. original API return results q:{“patent_type”:“Design”} ElasticSearch version . probably won’t matter R package slash url parameters /api/v1/uspc_subclass/{uspc_subclass_id}/ /api/v1/cpc_subgroup/{cpc_subgroup_id}/ need changed colons, ex. 100:1 100/1 A01B1:00 A01B1/00 respectively. can seen return patent endpoint’s cpc_current.cpc_subgroup, example “https://search.patentsview.org/api/v1/cpc_subgroup/G01S7:4865/” (Clicking link result 403 Unauthorized - API key sent browser.) ’s HATEOAS style link conatins colon instead slash. API seems like become less useful. lot use cases break, like ones lists https://docs.ropensci.org/patentsview/articles/examples.html API returns null value fields rather returning attribute. might matter cast-pv-data.R","code":"\"assignees_at_grant\": [         {           \"name_first\": null,           \"name_last\": null,           \"organization\": \"INTERNATIONAL BUSINESS MACHINES CORPORATION\",         }       ]"},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"todos","dir":"","previous_headings":"","what":"TODOS","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"exampes may possible due API change, like searching inventors location. (locations endpoint test server yet.) bogus locations test test-search-pv.R reworked removed. (future feature?) search-pv option automatically retrieve HATEOAS links all_pages FALSE? closer original version API data added automatically. (need check data see useful.) (future feature?) cast-pv-data offer option strip HATEOAS links? meaningful user: “cpc_subgroup”: “https://search.patentsview.org/api/v1/cpc_subgroup/G01S7:4811/” (Clicking link result 403 Unauthorized - API key sent browser) just want value G01S7:4811 even G01S7/4811? Test comes back API calls matches spreadsheet /Swagger definition (ultimate source truth). ’s “API Update Table” link fields spreadsheet bottom https://patentsview.org/apis/purpose test-api-returns.R currently checks groups come back, extended include fields. Check location specific error checking still needed (throw_if_loc_error() process-error.R). locations endpoint won’t return many fields ’s test server yet. locations tab spreadsheet just mentiomend don’t look right. helpful test written test searchability string/full text fields. words, types right fake documentation? Confirm can _text_any fields think full text _contains ones think strings. Update: test-alpha-types.R either Swagger parsers run. API throw error wrong set operators used, made writing test case easier. lot fields doesn’t seem matter. return results {“_text_phrase”:{“patent_title”:“world”}} {“_contains”:{“patent_title”:“world”}} field seems matter patent_abstract. probably remove printing url stderr search-pv ’s darn useful durning development (future feature?) Add method iterate data ranges generated safe_date_ranges (converting--existing-script vignette) return concatenated results. just wrap whole thing, user passes query, call safe_date_ranges give back combined data set. probably don’t need process-error.R though location endpoint test server yet possible, suppress api-redesign.md producing docs/api-redesign.html Clean utils.R hadn’t noticed writting test-utils.R to_singular used package. to_plural() isn’t used, ’s hold failed attempt making endpoints singular. tech note probably order announce new version package. ’s unlinked vignette potential starting point original rOpenSci blog post also reworked new, unlinked vignette needs work, ggplot stopped working README.Rmd’s link changed new post tech note. Follow tidyverse style Add issue template saying people shouldn’t share api key (suggested best practices page) Add CONTRIBUTING.md (also mentioned best practices page) info setting API key forked repo etc. Maybe include rendering vignettes locally.","code":"\"Your request resulted in a 500 error, likely because you have \",  \"requested too many fields in your request (the locations endpoint \",  \"currently has restrictions on the number of fields/groups you can \",  \"request). Try slimming down your field list and trying again.\""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"questions-1","dir":"","previous_headings":"","what":"Questions","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"bump version number 0.4.0 1.0.0? API key alone quarantees package won’t backward compatible. fields changing type? (like assignee organization becoming full text field, formerly string) fields (like government interests) went away? handle release? versions API supposed around. people install updated R package branch ropensci/patentsview? original version API retired CRAN build? r-universe possibility see https://mustberuss.r-universe.dev/ui#package:patentsview Possible idea: ask patentsview people create separate category R package forum? Guessing people may need help conversions! Add date range finder package? Refactor code tests x.R test-x.R pattern isn’t broken?","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"swagger-101","dir":"","previous_headings":"","what":"Swagger 101","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"Open version Swagger object new version API Swagger Editor “Generate Client-r” one html ones. Pretty powerful huh? also numerous tools fun things Swagger object input nothing seems R based. find looks promising CRAN github. One gotcha, expects input file older Swagger 2.0 format. works throws warning. looks like really need R port python project https://github.com/cyprieng/swagger-parser! Oops, ’s reading Swagger 2 files. say isn’t something generate fieldsdf.csv Swagger definition, may heavy lifting .","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/api-redesign.html","id":"carried-over","dir":"","previous_headings":"","what":"Carried Over","title":"Affects on the R package of the Patentsview API changes announced in 2021","text":"Observations original version R package still true version. Paging isn’t quite right, repeats first request all_pages = TRUE, slight improvement opportunity. search field explicitly specified f: parameter sort field specified. API default fields sorted , without specifying f: parameter. script make API calls see default fields . Probably isn’t worth effort, ’s necessarily improvement! (’s just observation) screenshot highcharter plot top-assignees vignette incomplete. png shows little bit IBM’s yearly patents, full awesomeness highcharter’s plot. Figured ! needed set delay = TRUE block. Also set global fig.cap=“” suppress “plot chunk unnamed-chunk-3”, also named blocks wouldn’t image name collisions figure/unnamed-chunk-3-1.png    ","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"summary-of-the-api-changes-announced-in-2021","dir":"Articles","previous_headings":"","what":"Summary of the API changes announced in 2021","title":"API Changes","text":"July 2021 Patentview API team announced upcoming API changes https://patentsview.org/data--action/whats-new-patentsview-july-2021. page explain impact r package existing code. Patentsview API team provided Swagger UI page new version API https://search.patentsview.org/swagger-ui/. shows available endpoints responses. field 200 response sections requested fields/f: parameter field supposed queryable (usable query/q: parameter). Swagger UI page can used make requests, API key enter authorization screen, new API key . Swagger UI definition https://search.patentsview.org/static/openapi.json can imported Postman give nicely loaded collection changed API. ’ll just need set global variable PVIEW_KEY set authorization’s value {{PVIEW_KEY}} API key.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"an-api-key-is-required","dir":"Articles","previous_headings":"","what":"An API Key is required","title":"API Changes","text":"Perhaps important change, without API key queries rejected. Request API key using link: https://patentsview.org/apis/keyrequest one, ’ll need set environmental variable PATENTSVIEW_API_KEY value API key R package use.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"philosophical-changes","dir":"Articles","previous_headings":"","what":"Philosophical Changes","title":"API Changes","text":"changes likely break existing code. Now endpoints returns smaller, specific data structure pertinent endpoint. example, previously inventor endpoint return assignee information, longer . exception patents endpoint. now can return assignees, inventors, cpc_current along patent specific fields. Note now subsequent queries made USPC specific endpoints looking fields. Currently 23 endpoints, original 7. urls changed slightly R package takes care . /api/v1/brf_sum_text/ /api/v1/claim/ /api/v1/detail_desc_text/ /api/v1/draw_desc_text/ /api/v1/ipc/ /api/v1/uspc_subclass/ /api/v1/patent/attorney/ /api/v1/patent/foreign_citation/ /api/v1/patent/otherreference/ (currently working) /api/v1/patent/rel_app_text/ /api/v1/patent/us_application_citation/ /api/v1/patent/us_patent_citation/ /api/v1/publication/rel_app_text/ /api/v1/publications/ /api/v1/wipo/ /api/v1/assignee/ /api/v1/inventor/ /api/v1/location/ /api/v1/patent/ /api/v1/uspc_mainclass/ /api/v1/cpc_class/ /api/v1/cpc_subclass/ /api/v1/cpc_group/ nber_subcategory endpoint seems gone now.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"data-reduction","dir":"Articles","previous_headings":"","what":"Data Reduction","title":"API Changes","text":"fields seem gone away, raw inventor fields, coinventor fields, patent_firstnamed fields patent_num_claims. ’s link spreadsheet fields returned endpoint bottom https://patentsview.org/apis/purpose though Swagger UI page current.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"hateoas","dir":"Articles","previous_headings":"","what":"HATEOAS","title":"API Changes","text":"returned fields HATEOAS (Hypermedia Engine Application State) links retrieve information field. Slightly funky cpc_current’s cpc_group, returned patents endpoint. slash cpc turned colon. peculiarity two new convience urls shouldn’t noticable r package, unless trying infer uspc cpc values returned urls, without actually calling back data. something slightly funky fields. _id q:/query f:/fields parameters returned without _id. Example: cpc_group_id returned HATEOAS link cpc_group. Example link returned patents endpoint Note going link browser result 403 Unauthorized, API key sent. new method R package retrive data HATEOAS links, just pass returned link R package retrieve data .","code":"\"cpc_current\": {      \"cpc_group\": \"https://search.patentsview.org/api/v1/cpc_group/G01S7:4865/\"     } library(patentsview)  pv_data <- retrieve_linked_data(\"https://search.patentsview.org/api/v1/cpc_group/G01S7:4865/\") pv_data #> $data #> #### A list with a single data frame on cpc_groups level: #>  #> List of 1 #>  $ cpc_groups:'data.frame':  1 obs. of  4 variables: #>   ..$ cpc_class      : chr \"https://search.patentsview.org/api/v1/cpc_class/G\".. #>   ..$ cpc_subclass   : chr \"https://search.patentsview.org/api/v1/cpc_subclas\".. #>   ..$ cpc_group_id   : chr \"G01S7/4865\" #>   ..$ cpc_group_title: chr \"Details of systems according to groups G01S13/00,\".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 1  if(pv_data$query_results$total_hits != 1){    print(\"something is wrong with the API.  Response should match this:\")    query <- qry_funs$eq(\"cpc_group_id\" = \"G01S7/4865\")    search_pv(query, endpoint = \"cpc_group\") }"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"throttling","dir":"Articles","previous_headings":"","what":"Throttling","title":"API Changes","text":"API now allow 45 requests per minute, making requests anger API. send back error code header indicating many seconds wait sending queries. R package take care . sleep required number seconds resubmitting query, seemlessly script.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"alpha-fields","dir":"Articles","previous_headings":"","what":"Alpha Fields","title":"API Changes","text":"fieldsdf show field types, names endpoints new version API. different operators string full text fields. String Fields Full Text Fields","code":"library(knitr) library(dplyr)  string_fields <-    fieldsdf %>%       filter(data_type == \"string\")  %>%       select(endpoint, field, data_type) %>%       arrange(`endpoint`, `field`)     kable(string_fields,  row.names = FALSE, caption = 'String Fields') fulltext_fields <-    fieldsdf %>%       filter(data_type == \"fulltext\")  %>%       select(endpoint, field, data_type) %>%       arrange(endpoint, field)     kable(fulltext_fields ,  row.names = FALSE, caption = 'Full Text Fields')"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/api-changes.html","id":"other-changes","dir":"Articles","previous_headings":"","what":"Other Changes","title":"API Changes","text":"fields names changed. assignee_last_name now name_last assignees data structure. fields’ types changed, strings original version API become full text field full text fields becomes strings. means ’ll need use different methods including query. Example: assignee organization renamed organization now full text field, formerly string. API’s endpoints now singular, instead plural. Ex /patents now /patent returned data structures still plural, ex. patents. fields supposed queryable new version API. subdomain API changed https://api.patentsview.org/ https://search.patentsview.org. R package takes care . Nested fields seem need fully qualified f:parameter. patents endpoint’s fields:","code":"sort(get_fields(\"patents\")) #> Error: endpoint must be one of the following: patent/us_application_citation, assignee, cpc_subclass, cpc_group, cpc_class, inventor, patent/us_patent_citation, patent, uspc_subclass, uspc_mainclass, location, patent/attorney, patent/foreign_citation, patent/rel_app_text, wipo, ipc, publication, publication/rel_app_text, brf_sum_text, claim, detail_desc_text, draw_desc_text"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/citation-networks.html","id":"count-the-distinct-patent_id-and-cited_patent_id","dir":"Articles","previous_headings":"","what":"Count the distinct patent_id and cited_patent_id","title":"Citation networks","text":"11 PCA patents. patents cite 1037 patents cited 1024 patents. Let’s visualize citations among PCA patents. ’ll create visualization using visNetwork package, requires us create data frame nodes data frame edges. looks like several patents cite patent number 6,499,026, perhaps indicating patent contains technology foundational field. However, hover nodes see several patents title. Clicking titles brings us full text Google Patents, confirms many PCA patents belong patent family.1 Let’s choose one patents family act family’s representative. reduce size subsequent network, hopefully retaining overall structure. 3 patents, probably possible visualize patents’ cited citing patents related one another. Let’s create list “relevant patents” (.e., 3 patents plus cited citing patents)2, get list cited patents (.e., patents cite). list cited patents allow us measure similar relevant patents one another. Now know patents 4772 relevant patents cite. allows us measure similarity 4772 patents seeing many cited references share common (method known bibliographic coupling). full_network contains similarity score (cosine_sim) patent pairs share least one cited reference common. means probably contains lot patent pairs one two cited references common, thus aren’t similar. Let’s try identify natural level cosine_sim filter subsequent network hairy.  appears smallish group patent pairs similar one another (cosine_sim > 0.8), makes tempting choose 0.8 cutoff point. However, patent pairs reference lists similar probably just patents patent family. Let’s choose 0.1 cutoff point instead, doesn’t appear many pairs point.3","code":"# with the API change we wouldn't have titles unless we call the patents endpoint # we'll use the patent number as the title for now  pat_title <- function(title, number) {   temp_title <- str_wrap(title)   i <- gsub(\"\\\\n\", \"<br>\", temp_title)   paste0('<a href=\"https://patents.google.com/patent/US', number, '\">', i, \"<\/a>\") }  edges <-   res_lst$us_patent_citations %>%   semi_join(x = ., y = ., by = c(\"citation_patent_id\" = \"patent_id\")) %>%   set_colnames(c(\"from\", \"to\"))  # We could call the patents endpoint to get the patent titles but we'll just set # the title to the patent number nodes <-   res_lst$us_patent_citations %>%   distinct(patent_id) %>%   mutate(     id = patent_id,     label = patent_id,     title = pat_title(patent_id, patent_id)   )  visNetwork(   nodes = nodes, edges = edges, height = \"400px\", width = \"100%\",   main = \"Citations among patent citation analysis (PCA) patents\" ) %>%   visEdges(arrows = list(to = list(enabled = TRUE))) %>%   visIgraphLayout() #> Error in launch_chrome(path, args): Failed to start chrome. Error: p3 <- c(\"7797336\", \"9075849\", \"6499026\") res_lst2 <- lapply(res_lst, function(x) x[x$patent_id %in% p3, ]) rel_pats <-   res_lst$us_patent_citations %>%   rbind(setNames(res_lst$us_patent_citations, names(.))) %>%   select(-patent_id) %>%   rename(patent_id = citation_patent_id) %>%   bind_rows(data.frame(patent_id = p3)) %>%   distinct() %>%   filter(!is.na(patent_id))  # Look up which patents the relevant patents cite.  We need to use the  # patent_citation endpoint now, though we can't get patent_title from it.  rel_pats_res <- search_pv(   query = list(patent_id = rel_pats$patent_id),   fields = c(\"citation_patent_id\", \"patent_id\"),   all_pages = TRUE, per_page = 1000, method = \"POST\", endpoint = \"patent/us_patent_citation\" )  rel_pats_lst <- unnest_pv_data(rel_pats_res$data, \"patent_id\") cited_pats <-   rel_pats_lst$us_patent_citations %>%   filter(!is.na(citation_patent_id))  full_network <-   cited_pats %>%   do({     .$ind <-       group_by(., patent_id) %>%       group_indices()     group_by(., patent_id) %>%       mutate(sqrt_num_cited = sqrt(n()))   }) %>%   inner_join(x = ., y = ., by = \"citation_patent_id\") %>%   filter(ind.x > ind.y) %>%   group_by(patent_id.x, patent_id.y) %>%   mutate(cosine_sim = n() / (sqrt_num_cited.x * sqrt_num_cited.y)) %>%   ungroup() %>%   select(matches(\"patent_id\\\\.|cosine_sim\")) %>%   distinct()  kable(head(full_network)) hist(   full_network$cosine_sim,   main = \"Similarity scores between patents relevant to PCA\",   xlab = \"Cosine similarity\", ylab = \"Number of patent pairs\" ) edges <-   full_network %>%   filter(cosine_sim >= .1) %>%   rename(from = patent_id.x, to = patent_id.y, value = cosine_sim) %>%   mutate(title = paste(\"Cosine similarity =\", as.character(round(value, 3))))  nodes <-   rel_pats_lst$us_patent_citations %>%   distinct(patent_id) %>%   rename(id = patent_id) %>%   mutate(     # the 3 patents of interest will be represented as blue nodes, all others     # will be yellow     color = ifelse(id %in% p3, \"#97C2FC\", \"#DDCC77\"),     label = id,     title = pat_title(id, id) # we don't get patent_title now (formerly first argument)   )  visNetwork(   nodes = nodes, edges = edges, height = \"700px\", width = \"100%\",   main = \"Network of patents relevant to PCA\" ) %>%   visEdges(color = list(color = \"#343434\")) %>%   visOptions(highlightNearest = list(enabled = TRUE, degree = 1)) %>%   visIgraphLayout() #> Error in launch_chrome(path, args): Failed to start chrome. Error:"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/converting-an-existing-script.html","id":"necessary-script-changes","dir":"Articles","previous_headings":"","what":"Necessary Script Changes","title":"Converting an Existing Script","text":"script worked original R package original version API, chances need possibly substantial changes work new version R package API.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/converting-an-existing-script.html","id":"the-one-required-change","dir":"Articles","previous_headings":"","what":"The One Required Change","title":"Converting an Existing Script","text":"First ’ll need request API key set environmental variable PATENTSVIEW_API_KEY value API key. Ex. set PATENTSVIEW_API_KEY=My_api_key Without valid API key, calls rejected API. small chance needed convert simple script use new R package new version API.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/converting-an-existing-script.html","id":"the-new-throttling-limit","dir":"Articles","previous_headings":"","what":"The New Throttling Limit","title":"Converting an Existing Script","text":"Another new thing throttling limit. new version API allows individual API key make 45 calls per minute. call exceeds limit rejected return number seconds wait calls allowed . Fortunately, R package handles ! script chugging along API return throttling response, R package sleep required number seconds automatically resending query! thing may notice, besides warning message, script pause throttled picks right back . new versions API’s endpoints less Swiss Army Knife-like , get nearly data field endpoint. Now substantially lighter responses generally focus data pertinent endpoint. words, can get uspc fields uspc endpoints. may mean ’ll make multiple calls different endpoints get data old version API used return single call. Take look top assignees application. blend together information separate calls used returned single call. may push dplyr knowlegde limit.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/converting-an-existing-script.html","id":"changed-field-names-and-types","dir":"Articles","previous_headings":"","what":"Changed Field Names and Types","title":"Converting an Existing Script","text":"fields selected original stript may available new version’s endpoints. Fields like government interests longer available (see https://patentsview.org/data--action/whats-new-patentsview-july-2021). Also, attributes new names, like name_last nested inventor object. Now fields parameter specified “inventor.name_last” formerly “inventor_last_name” using patents endpoint. Also note field’s types changed, meaning ’ll need use different operators within query. Ex. assignee.organization now full text field, formerly string.","code":"library(patentsview)  # Before you could do a  qry_funs$contains(assignee_organization=\"Rice University\") #> {\"_contains\":{\"assignee_organization\":\"Rice University\"}}  # now you would have to do  qry_funs$text_phrase(assignees.assignee_organization=\"Rice University\") #> {\"_text_phrase\":{\"assignees.assignee_organization\":\"Rice University\"}}"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/converting-an-existing-script.html","id":"additions-to-the-r-package","dir":"Articles","previous_headings":"","what":"Additions to the R Package","title":"Converting an Existing Script","text":"","code":"# There is a new in_range query function  range <- qry_funs$in_range(patent_date=c(\"1970-01-01\",\"1983-02-28\"))   # which will generate this, so you don't have to do it by hand range #> {\"_and\":[{\"_gte\":{\"patent_date\":\"1970-01-01\"}},{\"_lte\":{\"patent_date\":\"1983-02-28\"}}]}"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/converting-an-existing-script.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Converting an Existing Script","text":", attempt listing ’s changed . Request API key get going new version R package! two API versions coexist API team plans shutdown original version API February 2025.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/examples.html","id":"recent-api-change","dir":"Articles","previous_headings":"","what":"Recent API Change","title":"Examples","text":"recent API changes, patents endpoint main way retrieve data. endpoints supply additional information. Also note API key required.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/examples.html","id":"patents-endpoint","dir":"Articles","previous_headings":"","what":"Patents endpoint","title":"Examples","text":"patents cited 500 US patents? many distinct inventors represented highly-cited patents? assignee’s organizations start Microsoft? geographically Microsoft inventors coming past years? Note api currently returns results “Microsoft Corporation” return “Microsoft Corporation”, “Microsoft Corporation—One Microsoft Way” inventors Chicago, IL listed location least one patent.1 assignees interest beer?","code":"library(patentsview)  search_pv(query = qry_funs$gt(patent_num_times_cited_by_us_patents = 500)) #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  3 variables: #>   ..$ patent_id   : chr [1:1000] \"10004497\" ... #>   ..$ patent_title: chr [1:1000] \"Interface systems for use with surgical ins\".. #>   ..$ patent_date : chr [1:1000] \"2018-06-26\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 13,199 search_pv(   query = qry_funs$gt(patent_num_times_cited_by_us_patents = 500),   fields = c(\"patent_id\", \"inventors.inventor_id\") ) #> $data #> #### A list with a single data frame (with list column(s) inside) on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  2 variables: #>   ..$ patent_id: chr [1:1000] \"10004497\" ... #>   ..$ inventors:List of 1000 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 13,199 query <- qry_funs$begins(assignee_organization = \"Microsoft\")  pv_out <- search_pv(query, endpoint = \"assignee\") pv_out$data$assignees$assignee_organization #>  [1] \"Microsoft Technology Beaming, LLC\"                #>  [2] \"MICROSOFT INTERNATIONAL HOLDINGS B.V.\"            #>  [3] \"Microsoft Mobile Oy\"                              #>  [4] \"Microsoft Technology, LLC.\"                       #>  [5] \"Microsoft Systems Inc.\"                           #>  [6] \"Microsoft Technology Licensing, LLC\"              #>  [7] \"Microsoft Corporation\"                            #>  [8] \"Microsoft Patent Licensing, LLC\"                  #>  [9] \"Microsoft Corporation—One Microsoft Way\"          #> [10] \"Microsoft Licencing Corporation, LLC\"             #> [11] \"Microsoft Mobile Internet AB\"                     #> [12] \"Microsoft Licensing Technology, LLC\"              #> [13] \"Microsoft Technology Learning, LLC\"               #> [14] \"Microsoft Israel Research and Development (2002)\" #> [15] \"Microsoft Orthopedics Holdings Inc.\" # Write the query query <- with_qfuns(   and(     gte(patent_date = \"2022-07-26\"), # Dates are in yyyy-mm-dd format     begins(assignees.assignee_organization = \"Microsoft\")   ) )  # Create a field list inv_fields <- get_fields(endpoint = \"patent\", groups = \"inventors\") fields <- c(inv_fields, \"patent_id\")  # Pull the data pv_out <- search_pv(query, fields = fields, all_pages = TRUE, per_page = 1000)  # Unnest the inventor list column unnest_pv_data(pv_out$data, \"patent_id\") #> List of 2 #>  $ inventors:'data.frame':   14533 obs. of  8 variables: #>   ..$ patent_id          : chr [1:14533] \"11397055\" ... #>   ..$ inventor           : chr [1:14533] \"https://search.patentsview.org/api/\".. #>   ..$ inventor_name_first: chr [1:14533] \"Tzu-Yuan\" ... #>   ..$ inventor_name_last : chr [1:14533] \"Lin\" ... #>   ..$ inventor_city      : chr [1:14533] \"San Jose\" ... #>   ..$ inventor_state     : chr [1:14533] \"CA\" ... #>   ..$ inventor_country   : chr [1:14533] \"US\" ... #>   ..$ inventor_sequence  : int [1:14533] 1 2 ... #>  $ patents  :'data.frame':   3600 obs. of  1 variable: #>   ..$ patent_id: chr [1:3600] \"11397055\" ... pv_out <- search_pv(   query = '{\"_and\":[{\"_text_phrase\": {\"inventors.inventor_city\":\"Chicago\"}},{\"_text_phrase\": {\"inventors.inventor_state\":\"IL\"}}]}',   endpoint = \"patent\" )  pv_out #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  3 variables: #>   ..$ patent_id   : chr [1:1000] \"10000578\" ... #>   ..$ patent_title: chr [1:1000] \"Method for production of cellulose nanocrys\".. #>   ..$ patent_date : chr [1:1000] \"2018-06-19\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 46,544  if (pv_out$query_results$total_hits == 0) {   print(\"something seems to be wrong with the API\") } search_pv(   query = qry_funs$contains(patent_title = \"beer\"),   endpoint = \"patent\" ) #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 592 obs. of  3 variables: #>   ..$ patent_id   : chr [1:592] \"10000326\" ... #>   ..$ patent_title: chr [1:592] \"Plastic beer keg\" ... #>   ..$ patent_date : chr [1:592] \"2018-06-19\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 592"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"important-api-change","dir":"Articles","previous_headings":"","what":"Important API Change","title":"Getting started","text":"new version API requires API key, requests rejected. Request API key using link: https://patentsview.org/apis/keyrequest one, ’ll need set environmental variable PATENTSVIEW_API_KEY value API key R package use.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"a-basic-example","dir":"Articles","previous_headings":"","what":"A basic example","title":"Getting started","text":"Let’s start basic example use package’s primary function, search_pv(): call search_pv() sends query patents endpoint (default). API 18 different endpoints, corresponding 18 different entity types (application_citation, assignee, cpc_group, cpc_subgroup, cpc_subsection, inventor, location, nber_category, nber_subcategory, patent, patent_citation, uspc_mainclass uspc_subclass).1 choice endpoint determines entity query applied , well structure data returned (“18 endpoints 18 entities section”). now, let’s turn attention query parameter.","code":"library(patentsview)  search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}',   endpoint = \"patent\" ) #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  3 variables: #>   ..$ patent_id   : chr [1:1000] \"10000000\" ... #>   ..$ patent_title: chr [1:1000] \"Coherent LADAR using intra-pixel quadrature\".. #>   ..$ patent_date : chr [1:1000] \"2018-06-19\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 5,362,291"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"writing-queries","dir":"Articles","previous_headings":"","what":"Writing queries","title":"Getting started","text":"PatentsView query syntax documented query language page note also change Options parameter new version API mentioned page.2 However, can difficult get query right ’re writing hand (.e., just writing query string like '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}', example shown ). patentsview package comes simple domain specific language (DSL) make writing queries breeze. recommend using functions DSL basic queries, especially ’re encountering errors don’t understand . get feel works, let’s rewrite query shown using one functions DSL, qry_funs$gte(): complex queries also possible: Check writing queries vignette details using DSL.","code":"qry_funs$gte(patent_date = \"2007-01-01\") #> {\"_gte\":{\"patent_date\":\"2007-01-01\"}} with_qfuns(   and(     gte(patent_date = \"2007-01-01\"),     text_phrase(patent_abstract = c(\"computer program\", \"dog leash\"))   ) ) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-01-01\"}},{\"_or\":[{\"_text_phrase\":{\"patent_abstract\":\"computer program\"}},{\"_text_phrase\":{\"patent_abstract\":\"dog leash\"}}]}]}"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"fields","dir":"Articles","previous_headings":"","what":"Fields","title":"Getting started","text":"endpoint different set queryable retrievable fields. Queryable fields can include query (e.g., patent_date shown first example). Retrievable fields can get data (.e., fields returned search_pv()). new version API allows retrievable fields queried. first example, didn’t specify fields wanted retrieve given default set. can specify fields want using fields argument: list retrievable fields given endpoint, use get_fields(): See Swagger UI page API, fields returned listed endpoint 200 Response body sections. can also visit endpoint’s online documentation page see list retrievable fields (e.g., see inventor field list table). earlier versions API fields queryable now. field tables endpoints can found fieldsdf data frame, can load using data(\"fieldsdf\") View(patentsview::fieldsdf). important note: default, PatentsView uses disambiguted versions assignees, inventors, locations, instead raw data. example, let’s say search inventors whose first name “john.” PatentsView API going return inventors preferred first name (per disambiguation results) john, may necessarily raw first name. getting back inventors whose first name appears patent , say, “jonathan,” “johnn,” even “john jay.” can search raw inventor names instead preferred names using fields starting “raw” query (e.g., rawinventor_first_name). assignee location raw data fields currently offered API. see methods behind disambiguation process, see PatentsView Inventor Disambiguation Technical Workshop website.","code":"# search_pv defaults the endpoint parameter to \"patents\" if not specified result = search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}',   fields = c(\"patent_id\", \"patent_title\") ) result #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  2 variables: #>   ..$ patent_id   : chr [1:1000] \"10000000\" ... #>   ..$ patent_title: chr [1:1000] \"Coherent LADAR using intra-pixel quadrature\".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 5,362,291 retrvble_flds <- get_fields(endpoint = \"patent\") head(retrvble_flds) #> [1] \"applicants.applicant_designation\"  \"applicants.applicant_name_first\"   #> [3] \"applicants.applicant_name_last\"    \"applicants.applicant_organization\" #> [5] \"applicants.applicant_sequence\"     \"applicants.applicant_type\""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"paginated-responses","dir":"Articles","previous_headings":"","what":"Paginated responses","title":"Getting started","text":"default, search_pv() returns 1,000 records per page gives first page results. suggest starting something smaler, like per_page = 150 , ’re figuring details request, query want use fields want returned. items finalized, can use per_page argument download 1,000 records per page. can download pages output one call setting all_pages = TRUE. set per_page equal 1,000 loop pages output (downloading 10 pages, 10,000 records total):","code":"search_pv(   query = qry_funs$eq(inventors.inventor_name_last = \"Chambers\"),   all_pages = TRUE, per_page = 1000 ) #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 2459 obs. of  1 variable: #>   ..$ patent_id: chr [1:2459] \"10000988\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 2,459"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"entity-counts","dir":"Articles","previous_headings":"","what":"Entity counts","title":"Getting started","text":"last two calls search_pv() gave value total_hits, even though got lot data second call. entity counts returned API refer number distinct entities across downloadable pages output, just page returned. Downloadable pages output important phrase , API limits us 10,000 records per query. example, got total_patent_count = 10,000 searched patents published 2007, even though way 10,000 patents. See FAQs details overcome 10,000 record restriction.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"endpoints-for-18-entities","dir":"Articles","previous_headings":"","what":"18 endpoints for 18 entities","title":"Getting started","text":"recent API change, patents endpoint supplies basic patent data endponts return specific data patents. choice endpoint determines two things: entity query applied . first call shown used patents endpoint, API searched patents least one inventor listed last name “chambers.” second call used inventors endpoint show returns similar query. structure data frame returned. first call returned data frame patent level, meaning row corresponded different patent. Fields patent level (e.g., inventors.inventor_name_last) returned list columns named entity associated field (e.g., inventors entity).3 Meanwhile, second call gave us data frame inventor level (one row inventor) used inventors endpoint. time want use patents endpoint. Note can still effectively filter fields patent-level using patents endpoint (e.g., can filter assignee name CPC category). patents relatively low-level entities. higher level entities like assignees, filter field assignee-level (e.g., inventor name), API return data assignee least one inventor whose name matches search, probably want.","code":"query <- qry_funs$eq(inventors.inventor_name_last = \"Chambers\")  # Here we'll request patent_id and the inventor fields from the patents endpoint inv_fields <- get_fields(endpoint = \"patent\", groups =\"inventors\") inv_fields #> [1] \"inventors.inventor_city\"       \"inventors.inventor_country\"    #> [3] \"inventors.inventor_id\"         \"inventors.inventor_name_first\" #> [5] \"inventors.inventor_name_last\"  \"inventors.inventor_sequence\"   #> [7] \"inventors.inventor_state\" fields <- c(inv_fields, \"patent_id\")  result <- search_pv(query, endpoint = \"patent\", fields = fields) result #> $data #> #### A list with a single data frame (with list column(s) inside) on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  2 variables: #>   ..$ patent_id: chr [1:1000] \"10000988\" ... #>   ..$ inventors:List of 1000 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 2,459  # Here's the first inventors result$data$patents$inventors[[1]] #>                                                               inventor #> 1   https://search.patentsview.org/api/v1/inventor/fl:si_ln:harrall-1/ #> 2   https://search.patentsview.org/api/v1/inventor/fl:da_ln:wagoner-1/ #> 3   https://search.patentsview.org/api/v1/inventor/fl:th_ln:bailey-10/ #> 4     https://search.patentsview.org/api/v1/inventor/fl:an_ln:barry-8/ #> 5 https://search.patentsview.org/api/v1/inventor/fl:ja_ln:chambers-11/ #>   inventor_name_first inventor_name_last inventor_city inventor_state #> 1            Simon J.            Harrall       Houston             TX #> 2            Danny W.            Wagoner       Cypress             TX #> 3           Thomas F.             Bailey       Houston             TX #> 4        Andrew A. W.              Barry Missouri City             TX #> 5            James W.           Chambers       Hackett             AR #>   inventor_country inventor_sequence #> 1               US                 4 #> 2               US                 1 #> 3               US                 0 #> 4               US                 3 #> 5               US                 2  # Now we will see what the inventors endpoint returns for a similar query.  We use get_fields() to get all the available for the inventors endpoint. query <- qry_funs$eq(inventor_name_last = \"Chambers\") fields <- get_fields(endpoint = \"inventor\")  search_pv(query, endpoint = \"inventor\", fields = fields) #> $data #> #### A list with a single data frame (with list column(s) inside) on inventors level: #>  #> List of 1 #>  $ inventors:'data.frame':   434 obs. of  16 variables: #>   ..$ inventor_id                 : chr [1:434] \"1vk0dcohf8r1vofo538cfxl2g\" ... #>   ..$ inventor_name_first         : chr [1:434] \"Gilbert V.\" ... #>   ..$ inventor_name_last          : chr [1:434] \"Chambers\" ... #>   ..$ inventor_gender_code        : chr [1:434] \"M\" ... #>   ..$ inventor_lastknown_city     : chr [1:434] \"Baytown\" ... #>   ..$ inventor_lastknown_state    : chr [1:434] \"TX\" ... #>   ..$ inventor_lastknown_country  : chr [1:434] \"US\" ... #>   ..$ inventor_lastknown_latitude : num [1:434] 29.7 ... #>   ..$ inventor_lastknown_longitude: num [1:434] -95 ... #>   ..$ inventor_lastknown_location : chr [1:434] \"https://search.patentsview.o\".. #>   ..$ inventor_num_patents        : int [1:434] 1 1 ... #>   ..$ inventor_num_assignees      : int [1:434] 1 2 ... #>   ..$ inventor_first_seen_date    : chr [1:434] \"1995-10-17\" ... #>   ..$ inventor_last_seen_date     : chr [1:434] \"1995-10-17\" ... #>   ..$ inventor_years_active       : num [1:434] 1 1 ... #>   ..$ inventor_years              :List of 434 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 434"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"casting-fields","dir":"Articles","previous_headings":"","what":"Casting fields","title":"Getting started","text":"API now returns data fields appropriate data type (e.g., numeric). small number fields returned strings integers woudl appropriate. can cast fields preferred R types using cast_pv_data():","code":"res <- search_pv(   query = \"{\\\"patent_id\\\":\\\"5116621\\\"}\",    fields = c(\"patent_date\", \"patent_title\", \"patent_year\") )  res #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1 obs. of  3 variables: #>   ..$ patent_title: chr \"Anti-inflammatory analgesic patch\" #>   ..$ patent_date : chr \"1992-05-26\" #>   ..$ patent_year : int 1992 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 1 # [<span style=\"color: red;\">trouble here<\/span>] # Use more appropriate data types: cast_pv_data(res$data) #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1 obs. of  3 variables: #>   ..$ patent_title: chr \"Anti-inflammatory analgesic patch\" #>   ..$ patent_date : Date[1:1], format: \"1992-05-26\" #>   ..$ patent_year : int 1992"},{"path":[]},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"im-sure-my-query-is-well-formatted-and-correct-but-i-keep-getting-an-error--whats-the-deal","dir":"Articles","previous_headings":"FAQs","what":"I’m sure my query is well formatted and correct but I keep getting an error. What’s the deal?","title":"Getting started","text":"API query syntax guidelines cover API’s behavior. Specifically, several things documented API’s webpage. writing queries vignette details . can also try string version query API’s Swagger UI page. error messages can sometimes help determine problem.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"does-the-api-have-any-rate-limitingthrottling-controls","dir":"Articles","previous_headings":"FAQs","what":"Does the API have any rate limiting/throttling controls?","title":"Getting started","text":"Yes, API currently allows 45 calls per minute API key. limit exceeded API return http status 429 response header Retry-set number seconds wait making subsequent requests. R package handle . need request API key set environmental variable PATENTSVIEW_API_KEY value key.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"how-do-i-download-more-than-10000-records","dir":"Articles","previous_headings":"FAQs","what":"How do I download more than 10,000 records?","title":"Getting started","text":"best bet split query pieces based dates, concatenate results together. Converting existing script vignette example, query return 10,000 records patents endpoint: download records associated query, split three pieces make three calls search_pv(), all_pages = TRUE: Note time written, original query returned 20,521 rows. point future query_1c return 10,000 rows.","code":"query <- with_qfuns(contains(patent_title = 'game')) query_1a <- with_qfuns(   and(     contains(patent_title = 'game'),     lte(patent_date = \"2010-05-17\")   ) )  query_1b <- with_qfuns(   and(     contains(patent_title = 'game'),     qry_funs$in_range(patent_date=c(\"2010-05-18\", \"2021-05-10\"))   ) )  query_1c <- with_qfuns(   and(     contains(patent_title = 'game'),     gte(patent_date = \"2021-05-11\")   ) )"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/getting-started.html","id":"how-do-i-access-the-data-frames-inside-the-list-columns-returned-by-search_pv","dir":"Articles","previous_headings":"FAQs","what":"How do I access the data frames inside the list columns returned by search_pv()?","title":"Getting started","text":"Let’s consider following data, assignees primary entity applications “government interest statements” secondary entities (also referred subentities): Government interests fields longer present res$data vector columns fields belong primary entity (e.g., res$data$patent_year) list columns fields belong secondary entity (e.g., res$data$assignees$assignee_organization). two good ways pull data frames nested inside list columns: Use tidyr::unnest. (probably easier choice two). Use patentsview::unnest_pv_data. unnest_pv_data() creates series data frames (one entity level) like tables relational database. provide data returned search_pv() field can act unique identifier primary entities: Now left series flat data frames instead single data frame data frames nested inside . flat data frames can joined together needed via primary key (assignee_id).","code":"# Create field list - fields <- get_fields(\"patent\")  # Pull data res <- search_pv(   query = qry_funs$text_any(inventors.inventor_name_last = \"Smith\"),    endpoint = \"patent\",    fields = fields ) res$data #> #### A list with a single data frame (with list column(s) inside) on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  36 variables: #>   ..$ patent_id                                                   : chr [1:10\".. #>   ..$ patent_title                                                : chr [1:10\".. #>   ..$ patent_type                                                 : chr [1:10\".. #>   ..$ patent_date                                                 : chr [1:10\".. #>   ..$ patent_year                                                 : int [1:100.. #>   ..$ patent_abstract                                             : chr [1:10\".. #>   ..$ patent_cpc_current_group_average_patent_processing_days     : int [1:100.. #>   ..$ patent_detail_desc_length                                   : int [1:100.. #>   ..$ patent_earliest_application_date                            : chr [1:10\".. #>   ..$ patent_num_foreign_documents_cited                          : int [1:100.. #>   ..$ patent_num_times_cited_by_us_patents                        : int [1:100.. #>   ..$ patent_num_total_documents_cited                            : int [1:100.. #>   ..$ patent_num_us_applications_cited                            : int [1:100.. #>   ..$ patent_num_us_patents_cited                                 : int [1:100.. #>   ..$ patent_processing_days                                      : int [1:100.. #>   ..$ patent_term_extension                                       : int [1:100.. #>   ..$ gov_interest_statement                                      : chr [1:10\".. #>   ..$ patent_uspc_current_mainclass_average_patent_processing_days: logi [1:10.. #>   ..$ application                                                 :List of 1000 #>   ..$ applicants                                                  :List of 1000 #>   ..$ assignees                                                   :List of 1000 #>   ..$ attorneys                                                   :List of 1000 #>   ..$ cpc_at_issue                                                :List of 1000 #>   ..$ cpc_current                                                 :List of 1000 #>   ..$ examiners                                                   :List of 1000 #>   ..$ figures                                                     :List of 1000 #>   ..$ gov_interest_organizations                                  :List of 1000 #>   ..$ granted_pregrant_crosswalk                                  :List of 1000 #>   ..$ inventors                                                   :List of 1000 #>   ..$ ipcr                                                        :List of 1000 #>   ..$ us_related_documents                                        :List of 1000 #>   ..$ us_term_of_grant                                            :List of 1000 #>   ..$ wipo                                                        :List of 1000 #>   ..$ foreign_priority                                            :List of 1000 #>   ..$ pct_data                                                    :List of 1000 #>   ..$ gov_interest_contract_award_numbers                         :List of 1000 library(tidyr)  # Get assignee data: res$data$patents %>%    unnest(assignees) %>%   head() #> # A tibble: 6 × 44 #>   patent_id patent_title paten…¹ paten…² paten…³ paten…⁴ paten…⁵ paten…⁶ paten…⁷ #>   <chr>     <chr>        <chr>   <chr>     <int> <chr>     <int>   <int> <chr>   #> 1 10000036  High kineti… utility 2018-0…    2018 Boron …    1286   11286 2015-0… #> 2 10000466  Substituted… utility 2018-0…    2018 The pr…     904  290583 2017-0… #> 3 10000693  Methods and… utility 2018-0…    2018 Method…    1229  156395 2014-0… #> 4 10000750  Method of i… utility 2018-0…    2018 Disclo…    1221   81511 2015-1… #> 5 10000975  Cutting ele… utility 2018-0…    2018 A cutt…    1263    6690 2014-0… #> 6 10000976  Cutting ele… utility 2018-0…    2018 A cutt…    1263   15136 2014-0… #> # … with 35 more variables: patent_num_foreign_documents_cited <int>, #> #   patent_num_times_cited_by_us_patents <int>, #> #   patent_num_total_documents_cited <int>, #> #   patent_num_us_applications_cited <int>, patent_num_us_patents_cited <int>, #> #   patent_processing_days <int>, patent_term_extension <int>, #> #   gov_interest_statement <chr>, #> #   patent_uspc_current_mainclass_average_patent_processing_days <lgl>, … unnest_pv_data(data = res$data, pk = \"patent_id\") #> List of 19 #>  $ application                        :'data.frame': 1000 obs. of  7 variables: #>   ..$ patent_id       : chr [1:1000] \"10000036\" ... #>   ..$ application_id  : chr [1:1000] \"14/753848\" ... #>   ..$ application_type: chr [1:1000] \"14\" ... #>   ..$ filing_date     : chr [1:1000] \"2015-06-29\" ... #>   ..$ series_code     : chr [1:1000] \"14\" ... #>   ..$ rule_47_flag    : logi [1:1000] FALSE ... #>   ..$ filing_type     : chr [1:1000] \"14\" ... #>  $ applicants                         :'data.frame': 1215 obs. of  8 variables: #>   ..$ patent_id             : chr [1:1215] \"10000036\" ... #>   ..$ applicant_name_first  : chr [1:1215] NA ... #>   ..$ applicant_name_last   : chr [1:1215] NA ... #>   ..$ applicant_organization: chr [1:1215] \"The United States of America repr\".. #>   ..$ applicant_sequence    : int [1:1215] 1 1 ... #>   ..$ applicant_designation : chr [1:1215] \"us-only\" ... #>   ..$ applicant_type        : chr [1:1215] \"applicant\" ... #>   ..$ location_id           : chr [1:1215] \"fe1dd7c7-16c7-11ed-9b5f-1234bde3c\".. #>  $ assignees                          :'data.frame': 975 obs. of  10 variables: #>   ..$ patent_id                     : chr [1:975] \"10000036\" ... #>   ..$ assignee                      : chr [1:975] \"https://search.patentsview\".. #>   ..$ assignee_type                 : chr [1:975] \"6\" ... #>   ..$ assignee_individual_name_first: chr [1:975] NA ... #>   ..$ assignee_individual_name_last : chr [1:975] NA ... #>   ..$ assignee_organization         : chr [1:975] \"The United States of Ameri\".. #>   ..$ assignee_city                 : chr [1:975] \"Washington\" ... #>   ..$ assignee_state                : chr [1:975] \"DC\" ... #>   ..$ assignee_country              : chr [1:975] \"US\" ... #>   ..$ assignee_sequence             : int [1:975] 0 0 ... #>  $ attorneys                          :'data.frame': 1131 obs. of  6 variables: #>   ..$ patent_id            : chr [1:1131] \"10000036\" ... #>   ..$ attorney_id          : chr [1:1131] \"3f82077f3559b6f685a391bfbcb2202e\" ... #>   ..$ attorney_sequence    : int [1:1131] 0 1 ... #>   ..$ attorney_name_first  : chr [1:1131] \"Jennifer L.\" ... #>   ..$ attorney_name_last   : chr [1:1131] \"Riley\" ... #>   ..$ attorney_organization: chr [1:1131] NA ... #>  $ cpc_at_issue                       :'data.frame': 7715 obs. of  5 variables: #>   ..$ patent_id      : chr [1:7715] \"10000036\" ... #>   ..$ cpc_sequence   : int [1:7715] 1 2 ... #>   ..$ cpc_class_id   : chr [1:7715] \"B32\" ... #>   ..$ cpc_subclass_id: chr [1:7715] \"B32B\" ... #>   ..$ cpc_group_id   : chr [1:7715] \"B32B5/26\" ... #>  $ cpc_current                        :'data.frame': 9497 obs. of  8 variables: #>   ..$ patent_id      : chr [1:9497] \"10000036\" ... #>   ..$ cpc_sequence   : int [1:9497] 0 1 ... #>   ..$ cpc_class      : chr [1:9497] \"https://search.patentsview.org/api/v1/cp\".. #>   ..$ cpc_class_id   : chr [1:9497] \"B32\" ... #>   ..$ cpc_subclass   : chr [1:9497] \"https://search.patentsview.org/api/v1/cp\".. #>   ..$ cpc_subclass_id: chr [1:9497] \"B32B\" ... #>   ..$ cpc_group      : chr [1:9497] \"https://search.patentsview.org/api/v1/cp\".. #>   ..$ cpc_group_id   : chr [1:9497] \"B32B5/26\" ... #>  $ examiners                          :'data.frame': 1227 obs. of  6 variables: #>   ..$ patent_id          : chr [1:1227] \"10000036\" ... #>   ..$ examiner_id        : chr [1:1227] \"l5ntkof8nrlpiyj3rcmiiln2g\" ... #>   ..$ examiner_first_name: chr [1:1227] \"Daniel H\" ... #>   ..$ examiner_last_name : chr [1:1227] \"Lee\" ... #>   ..$ examiner_role      : chr [1:1227] \"primary\" ... #>   ..$ art_group          : chr [1:1227] \"1746\" ... #>  $ figures                            :'data.frame': 968 obs. of  3 variables: #>   ..$ patent_id  : chr [1:968] \"10000036\" ... #>   ..$ num_figures: int [1:968] 19 1 ... #>   ..$ num_sheets : int [1:968] 6 1 ... #>  $ gov_interest_organizations         :'data.frame': 43 obs. of  5 variables: #>   ..$ patent_id     : chr [1:43] \"10000036\" ... #>   ..$ fedagency_name: chr [1:43] \"National Aeronautics and Space Administrati\".. #>   ..$ level_one     : chr [1:43] \"National Aeronautics and Space Administrati\".. #>   ..$ level_two     : chr [1:43] NA ... #>   ..$ level_three   : chr [1:43] NA ... #>  $ granted_pregrant_crosswalk         :'data.frame': 1004 obs. of  3 variables: #>   ..$ patent_id         : chr [1:1004] \"10000036\" ... #>   ..$ document_number   : chr [1:1004] \"20170190143\" ... #>   ..$ application_number: chr [1:1004] \"14753848\" ... #>  $ inventors                          :'data.frame': 4153 obs. of  8 variables: #>   ..$ patent_id          : chr [1:4153] \"10000036\" ... #>   ..$ inventor           : chr [1:4153] \"https://search.patentsview.org/api/v\".. #>   ..$ inventor_name_first: chr [1:4153] \"Cheol\" ... #>   ..$ inventor_name_last : chr [1:4153] \"Park\" ... #>   ..$ inventor_city      : chr [1:4153] \"Yorktown\" ... #>   ..$ inventor_state     : chr [1:4153] \"VA\" ... #>   ..$ inventor_country   : chr [1:4153] \"US\" ... #>   ..$ inventor_sequence  : int [1:4153] 1 3 ... #>  $ ipcr                               :'data.frame': 5383 obs. of  11 variables: #>   ..$ patent_id                     : chr [1:5383] \"10000036\" ... #>   ..$ ipc_sequence                  : int [1:5383] 0 1 ... #>   ..$ ipc_action_date               : chr [1:5383] \"2018-06-19\" ... #>   ..$ ipc_section                   : chr [1:5383] \"B\" ... #>   ..$ ipc_class                     : chr [1:5383] \"32\" ... #>   ..$ ipc_subclass                  : chr [1:5383] \"B\" ... #>   ..$ ipc_main_group                : chr [1:5383] \"5\" ... #>   ..$ ipc_subgroup                  : chr [1:5383] \"26\" ... #>   ..$ ipc_symbol_position           : chr [1:5383] \"F\" ... #>   ..$ ipc_classification_data_source: chr [1:5383] \"H\" ... #>   ..$ ipc_classification_value      : chr [1:5383] \"I\" ... #>  $ us_related_documents               :'data.frame': 4349 obs. of  9 variables: #>   ..$ patent_id                 : chr [1:4349] \"10000036\" ... #>   ..$ related_doc_type          : chr [1:4349] \"division\" ... #>   ..$ related_doc_kind          : chr [1:4349] NA ... #>   ..$ related_doc_number        : chr [1:4349] \"13136216\" ... #>   ..$ published_country         : chr [1:4349] \"US\" ... #>   ..$ related_doc_published_date: chr [1:4349] \"2011-07-26\" ... #>   ..$ related_doc_status        : chr [1:4349] NA ... #>   ..$ related_doc_sequence      : int [1:4349] 0 1 ... #>   ..$ wipo_kind                 : chr [1:4349] NA ... #>  $ us_term_of_grant                   :'data.frame': 658 obs. of  5 variables: #>   ..$ patent_id      : chr [1:658] \"10000036\" ... #>   ..$ term_grant     : logi [1:658] NA ... #>   ..$ term_extension : chr [1:658] \"85\" ... #>   ..$ term_disclaimer: chr [1:658] NA ... #>   ..$ disclaimer_date: logi [1:658] NA ... #>  $ wipo                               :'data.frame': 1748 obs. of  3 variables: #>   ..$ patent_id    : chr [1:1748] \"10000036\" ... #>   ..$ wipo_field_id: chr [1:1748] \"29\" ... #>   ..$ wipo_sequence: int [1:1748] 0 1 ... #>  $ foreign_priority                   :'data.frame': 87 obs. of  6 variables: #>   ..$ patent_id              : chr [1:87] \"10000975\" ... #>   ..$ priority_claim_sequence: int [1:87] 0 0 ... #>   ..$ priority_claim_kind    : chr [1:87] \"national\" ... #>   ..$ foreign_application_id : chr [1:87] \"1301647.2\" ... #>   ..$ filing_date            : chr [1:87] \"2013-01-30\" ... #>   ..$ foreign_country_filed  : chr [1:87] \"GB\" ... #>  $ pct_data                           :'data.frame': 218 obs. of  7 variables: #>   ..$ patent_id           : chr [1:218] \"10000975\" ... #>   ..$ published_filed_date: chr [1:218] \"2014-01-28\" ... #>   ..$ pct_102_date        : logi [1:218] NA ... #>   ..$ pct_371_date        : chr [1:218] \"2015-07-28\" ... #>   ..$ application_kind    : chr [1:218] \"00\" ... #>   ..$ pct_doc_number      : chr [1:218] \"PCT/GB2014/050210\" ... #>   ..$ pct_doc_type        : chr [1:218] \"pct_application\" ... #>  $ gov_interest_contract_award_numbers:'data.frame': 36 obs. of  2 variables: #>   ..$ patent_id   : chr [1:36] \"10004797\" ... #>   ..$ award_number: chr [1:36] \"2007-33610-18035\" ... #>  $ patents                            :'data.frame': 1000 obs. of  18 variables: #>   ..$ patent_id                                                   : chr [1:10\".. #>   ..$ patent_title                                                : chr [1:10\".. #>   ..$ patent_type                                                 : chr [1:10\".. #>   ..$ patent_date                                                 : chr [1:10\".. #>   ..$ patent_year                                                 : int [1:100.. #>   ..$ patent_abstract                                             : chr [1:10\".. #>   ..$ patent_cpc_current_group_average_patent_processing_days     : int [1:100.. #>   ..$ patent_detail_desc_length                                   : int [1:100.. #>   ..$ patent_earliest_application_date                            : chr [1:10\".. #>   ..$ patent_num_foreign_documents_cited                          : int [1:100.. #>   ..$ patent_num_times_cited_by_us_patents                        : int [1:100.. #>   ..$ patent_num_total_documents_cited                            : int [1:100.. #>   ..$ patent_num_us_applications_cited                            : int [1:100.. #>   ..$ patent_num_us_patents_cited                                 : int [1:100.. #>   ..$ patent_processing_days                                      : int [1:100.. #>   ..$ patent_term_extension                                       : int [1:100.. #>   ..$ gov_interest_statement                                      : chr [1:10\".. #>   ..$ patent_uspc_current_mainclass_average_patent_processing_days: logi [1:10.."},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"why-care-about-patents","dir":"Articles","previous_headings":"","what":"Why care about patents?","title":"Accessing patent data with the patentsview package","text":"1. Patents play critical role incentivizing innovation, without wouldn’t much technology rely everyday iPhone, Google’s PageRank algorithm, butter substitute called Smart Balance common?  …probably wouldn’t patents. patent provides owner ability make money something invented, without worry someone else copying technology. Think Apple spend millions dollars developing iPhone Samsung just come along rip ? Probably . 2. Patents offer great opportunity data analysis two primary reasons : Patent data public. return exclusive right profit invention, individual/company publicly disclose details invention rest world. Examples details include patent’s title, abstract, technology classification, assigned organizations, etc. Patent data can answer questions people care . Companies (especially big ones like IBM Google) vested interest extracting insights patents, spend lot time/resources trying figure best manage intellectual property (IP) rights. ’re plagued questions like “sell underperforming patents ,” “technology areas open new innovations,” “’s going next big thing world buttery spreads,” etc. Patents offer way provide data-driven answers questions. Combined, two things make patents prime target data analysis. However, recently hard get data inside documents. One either collect manually using official United States Patent Trademark Office (USPTO) search engine, figure way download, parse, model huge XML data dumps. Enter PatentsView.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"patentsview-and-the-patentsview-package","dir":"Articles","previous_headings":"","what":"PatentsView and the patentsview package","title":"Accessing patent data with the patentsview package","text":"PatentsView one USPTO’s new initiatives intended increase usability value patent data. One feature project publicly accessible API makes easy programmatically interact data. reasons like API (PatentsView generally): API key now required (request one ) throttling imposed (handled new version R package) 45 requests per minute. project offers bulk downloads patent data website (flat file format), want closest data. API bulk download data contain disambiguated entities inventors, assignees, organizations, etc. words, API tell whether thinks John Smith patent X person John Smith patent Y.1 patentsview R package wrapper around PatentsView API. contains function acts client API (search_pv()) well several supporting functions. Full documentation package can found website.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Accessing patent data with the patentsview package","text":"can install stable version patentsview r-universe: GitHub:","code":"options(repos = c(   patentsview = \"https://mustberuss.r-universe.dev/\",   CRAN = \"https://cloud.r-project.org\" ))  install.packages(\"patentsview\") if (!require(devtools)) install.packages(\"devtools\")    devtools::install_github(\"mustberuss/patentsview@api-redesign\")"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Accessing patent data with the patentsview package","text":"package one main function, search_pv(), makes easy send requests API. two parameters search_pv() ’re going want think just every time call - query fields. tell API want filter patent data query, fields want retrieve fields.2","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"query","dir":"Articles","previous_headings":"Getting started","what":"query","title":"Accessing patent data with the patentsview package","text":"query use PatentsView query language, JSON-based syntax similar one used Lucene. can write query directly pass string search_pv(): …can use domain specific language (DSL) provided patentsview package help write query: qry_1 qry_2 result HTTP call API. queries search patents USPTO published 2007. three gotchas look writing query: Fields now queryable. API 12 endpoints (default endpoint “patents”), endpoint set fields can filter . Correct data type field. ’re filtering field query, make sure value filtering consistent field’s data type. example, patent_year type “integer,” pass 2007 string ’re going get error (patent_year = 2007 good, patent_year = \"2007\" good). can find field’s data type fieldsdf data frame. Comparison function works field’s data type. comparison function(s) use (e.g., greater-function shown , qry_funs$gt()) must consistent field’s data type. example, can’t use “contains” function fields type “integer” (qry_funs$contains(patent_year = 2007) throw error). See ?qry_funs details. short, use fieldsdf data frame write query fine. Check writing queries vignette details.","code":"library(patentsview)  qry_1 <- '{\"_gt\":{\"patent_year\":2007}}' search_pv(query = qry_1, fields = NULL) # This will retrieve a default set of fields #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  3 variables: #>   ..$ patent_id   : chr [1:1000] \"10000000\" ... #>   ..$ patent_title: chr [1:1000] \"Coherent LADAR using intra-pixel quadrature\".. #>   ..$ patent_date : chr [1:1000] \"2018-06-19\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 5,179,313 qry_2 <- qry_funs$gt(patent_year = 2007) # All DSL functions are in the qry_funs list qry_2 # qry_2 is the same as qry_1 #> {\"_gt\":{\"patent_year\":2007}}  search_pv(query = qry_2) #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  3 variables: #>   ..$ patent_id   : chr [1:1000] \"10000000\" ... #>   ..$ patent_title: chr [1:1000] \"Coherent LADAR using intra-pixel quadrature\".. #>   ..$ patent_date : chr [1:1000] \"2018-06-19\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 5,179,313"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"fields","dir":"Articles","previous_headings":"Getting started","what":"fields","title":"Accessing patent data with the patentsview package","text":"now using default value fields. results API giving us small set default fields. Let’s see retrieving fields: original verison API requested patent_average_processing_time inventor_total_num_patents. fields longer available patents endpoint. fields can retrieve depends endpoint hitting. ’ve using “patents” endpoint thus far, retrievable: fieldsdf[fieldsdf$endpoint == \"patents\", \"field\"]. can also use get_fields() list retrievable fields given endpoint:","code":"search_pv(   query = qry_funs$gt(patent_year = 2007),   fields = c(\"patent_abstract\", \"inventors.inventor_name_first\") ) #> $data #> #### A list with a single data frame (with list column(s) inside) on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  2 variables: #>   ..$ patent_abstract: chr [1:1000] \"A frequency modulated (coherent) laser d\".. #>   ..$ inventors      :List of 1000 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 5,179,313 search_pv(   query = qry_funs$gt(patent_year = 2007),   fields = get_fields(endpoint = \"patent\", groups = c(\"patent\", \"inventors\")) ) #> $data #> #### A list with a single data frame (with list column(s) inside) on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  19 variables: #>   ..$ patent_id                                                   : chr [1:10\".. #>   ..$ patent_title                                                : chr [1:10\".. #>   ..$ patent_type                                                 : chr [1:10\".. #>   ..$ patent_date                                                 : chr [1:10\".. #>   ..$ patent_year                                                 : int [1:100.. #>   ..$ patent_abstract                                             : chr [1:10\".. #>   ..$ patent_cpc_current_group_average_patent_processing_days     : int [1:100.. #>   ..$ patent_detail_desc_length                                   : int [1:100.. #>   ..$ patent_earliest_application_date                            : chr [1:10\".. #>   ..$ patent_num_foreign_documents_cited                          : int [1:100.. #>   ..$ patent_num_times_cited_by_us_patents                        : int [1:100.. #>   ..$ patent_num_total_documents_cited                            : int [1:100.. #>   ..$ patent_num_us_applications_cited                            : int [1:100.. #>   ..$ patent_num_us_patents_cited                                 : int [1:100.. #>   ..$ patent_processing_days                                      : int [1:100.. #>   ..$ patent_term_extension                                       : int [1:100.. #>   ..$ gov_interest_statement                                      : chr [1:100.. #>   ..$ patent_uspc_current_mainclass_average_patent_processing_days: logi [1:10.. #>   ..$ inventors                                                   :List of 1000 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 5,179,313"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Accessing patent data with the patentsview package","text":"Let’s look quick example pulling analyzing patent data. ’ll look patents last ten years classified H04L63/00 CPC code. Patents area relate “network architectures network communication protocols separating internal external traffic.”3 CPC codes offer quick dirty way find patents interest, though getting sense hierarchy can tricky. Download data See assignees coming (geographically)  Plot growth field’s topics time","code":"library(patentsview)  # The original post's query is not currently possible with the current version of the new API. # This may be reworked if/when the patents endpoint is fixed.  The patents endpoint is supposed  # to assignees.assignee_location_id which we could then look up its latitude and longitude # at the location endpoint.  The problem is that currently the assignees.assignee_location_id # is not being returned by the new version of the API.  # Here we'll use a query that is currently possible, one which returns latitudes and longitudes # We'll query the assignees endpoint for non-empty assignee_organization, where their assignee_individual_name_first and assignee_individual_name_last should be empty # The sort will be by assignee_num_patents descending so we'll get a list of the most proflic assignee_organizations  query <- with_qfuns( # with_qfuns is basically just: with(qry_funs, ...)   neq(\"assignee_organization\" = \"\") )  # Create a list of fields: # We request the fields we will use below rather than requesting them all and  # then filtering to get just the ones we want fields <- c(\"assignee_id\", \"assignee_organization\", \"assignee_num_patents\",    \"assignee_lastknown_latitude\", \"assignee_lastknown_longitude\")  # Send HTTP request to API's server: pv_res <- search_pv(endpoint = \"assignee\", query = query, fields = fields,     sort = c(\"assignee_num_patents\" = \"desc\"), all_pages = FALSE) library(leaflet) library(htmltools) library(dplyr) library(tidyr) library(stringr)  # my mom was an English teacher, so below we singularize/pluralize Patents # or maybe Patents:1 was ok?  Here because of the sort it will be unlikely # that there will be a single patent in our results.  data <-   pv_res$data$assignees %>%   mutate(popup = paste0(     \"<font color='Black'>\",     htmlEscape(assignee_organization), \"<br><br>Patent\",     ifelse(assignee_num_patents == 1, \":\", \"s:\"), # singular/plural     assignee_num_patents, \"<\/font>\"   )) %>%   filter_at(vars(assignee_lastknown_latitude, assignee_lastknown_longitude), any_vars(!is.na(.))) # seeing NA lats and longs  leaflet(data) %>%   addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%   addCircleMarkers(     lng = ~assignee_lastknown_longitude, lat = ~assignee_lastknown_latitude,     popup = ~popup, radius=2, color = \"yellow\"   ) #> Error in launch_chrome(path, args): Failed to start chrome. Error: library(ggplot2) library(RColorBrewer)  # Here we issue the original post's query, rewritten for the new version of the API query <- with_qfuns( # with_qfuns is basically just: with(qry_funs, ...)   and(     begins(cpc_current.cpc_group_id = \"H04L63/02\"),     gte(patent_year = 2007)   ) )  # Create a list of fields: fields <- c(   c(\"patent_id\", \"patent_year\"),   get_fields(endpoint = \"patent\", groups = c(\"assignees\", \"cpc_current\")) )  pv_res <- search_pv(query = query, fields = fields, all_pages = TRUE)  # In the new version of the API, we don't get the CPC title back from the patents endpoint # we have to call, you guessed it, the cpc_group endpoint now qry <- qry_funs$begins(cpc_group_id = \"H04L63/02\") qry #> {\"_begins\":{\"cpc_group_id\":\"H04L63/02\"}}  cpc_info <- search_pv(query = qry, fields = get_fields(\"cpc_group\"), endpoint = \"cpc_group\")  # More API craziness, in the HATEAS link from the patents endpoint, the separator is # inexplicably a colon.  In the data that comes back from the cpc_groups endpoint, the # separator is, get this, a slash like it should be.  All that to say that joining # becomes a bit problematic or an exercise that makes dplyr wonder what we're up to.  data <-   pv_res$data$patents %>%   unnest(cpc_current) %>%   mutate(cpc_group = sub(\".*/([\\\\w:]+)/$\", \"\\\\1\", cpc_group, perl = TRUE)) %>% # unHATEOAS cpc_group, funky colon and all   filter(cpc_group != \"H04L63:02\") %>% # remove patents categorized into only top-level category of H04L63/02   mutate(cpc_group = sub(\":\", \"/\", cpc_group)) %>% # back to normality, ahead of a join   inner_join(cpc_info$data$cpc_groups, by = \"cpc_group_id\") %>%   ungroup() %>%   mutate(     title = case_when(       grepl(\"filtering\", .$cpc_group_title, ignore.case = T) ~         \"Filtering policies\",       .$cpc_group %in% c(\"H04L63/0209\", \"H04L63/0218\") ~         \"Architectural arrangements\",       grepl(\"Firewall traversal\", .$cpc_group_title, ignore.case = T) ~         \"Firewall traversal\",       TRUE ~         .$cpc_group_title     )   ) %>%   mutate(title = gsub(\".*(?=-)-\", \"\", title, perl = TRUE)) %>%   group_by(title, patent_year) %>%   count() %>%   ungroup()  max_year <- max(data$patent_year) y_limit <- max(data$n) + 100 - (max(data$n) %% 100) # even hundred past the max  ggplot(data = data) +   geom_smooth(aes(x = patent_year, y = n, colour = title), se = FALSE) +   scale_x_continuous(\"\\nGrant year\",     limits = c(2007, max_year),     breaks = 2007:max_year   ) +   scale_y_continuous(\"Patents\\n\", limits = c(0, y_limit)) +   scale_colour_manual(\"\", values = brewer.pal(5, \"Set2\")) +   theme_bw() + # theme inspired by https://hrbrmstr.github.io/hrbrthemes/   theme(panel.border = element_blank(), axis.ticks = element_blank()) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"learning-more","dir":"Articles","previous_headings":"","what":"Learning more","title":"Accessing patent data with the patentsview package","text":"analysis examples go little depth, check data applications vignettes package’s website. ’re just interested search_pv(), examples site well. contribute package report issue, check issues page GitHub.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_blog_post.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Accessing patent data with the patentsview package","text":"’d like thank package’s two reviewers, Paul Oldham Verena Haunschmid, taking time review package providing helpful feedback. ’d also like thank Maëlle Salmon shepherding package along rOpenSci review process, well Scott Chamberlain Stefanie Butland miscellaneous help.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_tech_note.html","id":"new-release-of-the-patentsview-package","dir":"Articles","previous_headings":"","what":"New release of the Patentsview Package","title":"Patentsview Tech Note","text":"API arms race, changes underlying Patentsview API break original version R package. possible new version R package handles API team’s changes. new version API requires API key however. original new versions API available , eventually Patentsview API team plans shutdown original version API. original version R package CRAN new version available r-universe. original version API shutdown, new R package submitted CRAN.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_tech_note.html","id":"user-impacting-api-changes","dir":"Articles","previous_headings":"New release of the Patentsview Package","what":"User Impacting API changes:","title":"Patentsview Tech Note","text":"Users need request API key set environmental variable. New endpoints added. endpoints renamed (moved) removed. endpoints return HATEOAS (Hypermedia Engine Application State) links retrieve data attribute names changes removed entirely.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/ropensci_tech_note.html","id":"highlights-of-the-r-package","dir":"Articles","previous_headings":"New release of the Patentsview Package","what":"Highlights of the R package:","title":"Patentsview Tech Note","text":"new “Converting existing script” vignette Throttling now enforced API handled R package (sleep specified throttle response retry) new function retrieve_linked_data() retrieve data HATEOAS link, retrying throttled ropensci post announcing original version R package modified work new version API now new vignette. hex logo created using GuangchuangYu’s hexSticker API team provided Swagger UI page new version API https://search.patentsview.org/swagger-ui/ help transition. unlikely existing script work new version R package API. shown updated Top Assignees vignette, occasions multiple API calls needed retrieve data single API call original version API R package. Please open issues https://github.com/ropensci/patentsview/issues R package. Issues questions API can raised API’s forum https://patentsview.org/forum","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/writing-queries.html","id":"three-ways-to-write-the-same-query","dir":"Articles","previous_headings":"","what":"Three ways to write the same query","title":"Writing queries","text":"Let’s say want find patents published last 10 years word “dog” titles abstracts, whose assignees located either US Canada. three ways write query: Use string: Use list: Use patentsview domain specific language (DSL):","code":"query_v_1 <-   '{\"_and\":[           {\"_gte\":{\"patent_date\":\"2007-03-01\"}},           {\"_or\":[             {\"_contains\":{\"patent_title\":\"dog\"}},             {\"_text_all\":{\"patent_abstract\":\"dog\"}}           ]},           {\"_or\":[             {\"_text_phrase\":{\"inventors.inventor_country\":\"US\"}},             {\"_text_phrase\":{\"inventors.inventor_country\":\"CA\"}}           ]}   ]}' query_v_2 <-    list(\"_and\" =         list(           list(\"_gte\" = list(patent_date = \"2007-03-01\")),           list(\"_or\" =                   list(                    list(\"_contains\" = list(patent_title = \"dog\")),                    list(\"_text_all\" = list(patent_abstract = \"dog\"))                    )                ),           list(\"_or\" =                   list(                    list(\"_text_phrase\" = list(inventors.inventor_country = \"US\")),                    list(\"_text_phrase\" = list(inventors.inventor_country = \"CA\"))                    )                )       )   ) library(patentsview)  query_v_3 <-    with_qfuns(     and(       gte(patent_date = \"2007-03-01\"),       or(         contains(patent_title = \"dog\"),         text_all(patent_abstract = \"dog\")       ),       or(         text_phrase(inventors.inventor_country = \"US\"),         text_phrase(inventors.inventor_country = \"CA\")       )     )   )"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/writing-queries.html","id":"why-use-the-dsl","dir":"Articles","previous_headings":"","what":"Why use the DSL?","title":"Writing queries","text":"can see three versions query shown equivalent: …ever want use method 3 methods 1 2? two main reasons:","code":"jsonlite::minify(query_v_1) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-03-01\"}},{\"_or\":[{\"_contains\":{\"patent_title\":\"dog\"}},{\"_text_all\":{\"patent_abstract\":\"dog\"}}]},{\"_or\":[{\"_text_phrase\":{\"inventors.inventor_country\":\"US\"}},{\"_text_phrase\":{\"inventors.inventor_country\":\"CA\"}}]}]} jsonlite::toJSON(query_v_2, auto_unbox = TRUE) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-03-01\"}},{\"_or\":[{\"_contains\":{\"patent_title\":\"dog\"}},{\"_text_all\":{\"patent_abstract\":\"dog\"}}]},{\"_or\":[{\"_text_phrase\":{\"inventors.inventor_country\":\"US\"}},{\"_text_phrase\":{\"inventors.inventor_country\":\"CA\"}}]}]} jsonlite::toJSON(query_v_3, auto_unbox = TRUE) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-03-01\"}},{\"_or\":[{\"_contains\":{\"patent_title\":\"dog\"}},{\"_text_all\":{\"patent_abstract\":\"dog\"}}]},{\"_or\":[{\"_text_phrase\":{\"inventors.inventor_country\":\"US\"}},{\"_text_phrase\":{\"inventors.inventor_country\":\"CA\"}}]}]}"},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/writing-queries.html","id":"query-validation","dir":"Articles","previous_headings":"Why use the DSL?","what":"1. Query validation","title":"Writing queries","text":"search_pv() check query errors use methods 2 3. case method 1, rely API’s error messages guidance query invalid. search_pv() checks queries following: fields included query queryable endpoint (.e., field can used user query). example, make sure assingee_country can used query argument sent query patents endpoint. fields query compatible comparison operators used. example, confirm text_all operator used field whose type “full text” (patent_title ). supplied correct value type field (e.g., patent_date character, integer).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/writing-queries.html","id":"concise-easy-to-use-syntax-for-complex-queries","dir":"Articles","previous_headings":"Why use the DSL?","what":"2. Concise, easy to use syntax for complex queries","title":"Writing queries","text":"Methods 1 3 shorter method 2, making quicker. ’s also lot easier get JSON syntax correct using method 3 compared method 1, don’t write JSON using DSL…important API fairly picky query syntax, ’s trivial get correct. example, API throw error use box JSON absolutely necessary, even query still valid JSON (e.g., query = {\"_gte\":{\"patent_date\":[\"2007-03-01\"]}} throw error). Compared method 1, method 3 correctly “” together values put vector. example, query shown , vector two values given assingee_country (c(\"US\", \"CA\")). safely converted single “equals” statement third element query (eq(assingee_country = c(\"US\", \"CA\"))) two separate equals statements got ’d together.1","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/writing-queries.html","id":"basics-of-the-language","dir":"Articles","previous_headings":"","what":"Basics of the language","title":"Writing queries","text":"functions make DSL found qry_funs list (e.g., qry_funs$eq()). can evaluate code context list using function with_qfuns() (see ?with_qfuns() example demonstrates with_qfuns() can save typing). three types functions qry_funs: Comparison operator functions (eq, neq, gt, gte, lt, lte, begins, contains, text_all, text_any, text_phrase). functions used compare field value. example, using “less equal ” function (lte), can filter patents published date (e.g., query = qry_funs$lte(patent_date = \"2001-01-05\")). See “comparison operators” section API’s query language page description 11 comparison operators. One important thing keep mind certain comparison operators work certain data types. example, can’t use begins function patent_abstract patent_abstract data type “full text” begins works fields data type “string.” Array functions (). can use functions logically combine calls comparison operators. example, can require patent date less equal 2001-01-05 inventor’s last name “Ihaka” (query = with_qfuns((lte(patent_date = \"2001-01-05\"), eq(inventor_last_name = \"Ihaka\")))). function (). function negates comparison. example, search patents don’t word “hi” titles like : qry_funs$(qry_funs$text_phrase(patent_title = \"hi\")).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/articles/writing-queries.html","id":"query-examples","dir":"Articles","previous_headings":"","what":"Query examples","title":"Writing queries","text":"following queries intended patents endpoint Patents linked assignee 10 fewer distinct (disambiguated) inventors: Patents assigned “CPC class” G12 (physics instruments): Patents : inventor listed whose first name “kevin” abstract containing either phrase “dog bark” “cat meow” abstract doesn’t phrase “dog chain” : Patents : inventor listed whose last name “Smith” “cotton gin” title inventor listed whose last name “Turner” “COBOL” title","code":"qry_funs$lte(num_inventors = 10) #> {\"_lte\":{\"num_inventors\":10}} qry_funs$eq(cpc_current.cpc_class_id = \"G12\") #> {\"_eq\":{\"cpc_current.cpc_class_id\":\"G12\"}} with_qfuns(   and(     text_any(inventors.inventor_name_first = \"kevin\"),  # inventor names are now full text     text_phrase(patent_abstract = c(\"dog bark\", \"cat meow\")),     not(       text_phrase(patent_abstract = c(\"dog chain\"))     )   ) ) #> {\"_and\":[{\"_text_any\":{\"inventors.inventor_name_first\":\"kevin\"}},{\"_or\":[{\"_text_phrase\":{\"patent_abstract\":\"dog bark\"}},{\"_text_phrase\":{\"patent_abstract\":\"cat meow\"}}]},{\"_not\":{\"_text_phrase\":{\"patent_abstract\":\"dog chain\"}}}]} with_qfuns(   or(     and(       eq(inventors.inventor_name_last = \"smith\"),       contains(patent_title = \"cotton gin\")     ),     and(       eq(inventors.inventor_name_last = \"turner\"),       contains(patent_title = \"COBOL\")     )   ) ) #> {\"_or\":[{\"_and\":[{\"_eq\":{\"inventors.inventor_name_last\":\"smith\"}},{\"_contains\":{\"patent_title\":\"cotton gin\"}}]},{\"_and\":[{\"_eq\":{\"inventors.inventor_name_last\":\"turner\"}},{\"_contains\":{\"patent_title\":\"COBOL\"}}]}]}"},{"path":"https://mustberuss.github.io/patentsview/index.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher Baker. Author, maintainer.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker C (2024). patentsview: R Client 'PatentsView' API. R package version 0.3.0, https://mustberuss.github.io/patentsview/index.html.","code":"@Manual{,   title = {patentsview: An R Client to the 'PatentsView' API},   author = {Christopher Baker},   year = {2024},   note = {R package version 0.3.0},   url = {https://mustberuss.github.io/patentsview/index.html}, }"},{"path":"https://mustberuss.github.io/patentsview/index.html/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to patentsview","title":"Contributing to patentsview","text":"outlines propose change patentsview. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to patentsview","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to patentsview","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to patentsview","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to patentsview","text":"Please note patentsview project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/CONTRIBUTING.html","id":"see-tidyverse-development-contributing-guide","dir":"","previous_headings":"","what":"See tidyverse development contributing guide","title":"Contributing to patentsview","text":"details.","code":""},{"path":[]},{"path":"https://mustberuss.github.io/patentsview/index.html/index.html","id":"patentsview-","dir":"","previous_headings":"","what":"patentsview","title":"An R Client to the PatentsView API","text":"R client PatentsView API","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Client to the PatentsView API","text":"can get stable version original version API CRAN: development version GitHub: R package new version API github: R package new version API r-universe:","code":"install.packages(\"patentsview\") if (!\"devtools\" %in% rownames(installed.packages())) {   install.packages(\"devtools\") }  devtools::install_github(\"ropensci/patentsview\") if (!\"devtools\" %in% rownames(installed.packages())) {   devtools::install_github(\"ropensci/patentsview@api-redesign\") } options(repos = c(   patentsview = \"https://mustberuss.r-universe.dev/\",   CRAN = \"https://cloud.r-project.org\" ))  install.packages(\"patentsview\")"},{"path":"https://mustberuss.github.io/patentsview/index.html/index.html","id":"important-api-change","dir":"","previous_headings":"","what":"Important API Change","title":"An R Client to the PatentsView API","text":"new version API requires api key, requests blocked. API key can optained . updated R package look environmental variable PATENTSVIEW_API_KEY set value key. windows See page change. navigation get updated vignettes reference pages.","code":"set PATENTSVIEW_API_KEY=my_keys_value_without quotes"},{"path":"https://mustberuss.github.io/patentsview/index.html/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"An R Client to the PatentsView API","text":"PatentsView API provides interface disambiguated version USPTO. patentsview R package provides one main function, search_pv(), make easy interact API:","code":"library(patentsview)  search_pv(query = '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}') #> $data #> #### A list with a single data frame on patents level: #>  #> List of 1 #>  $ patents:'data.frame': 1000 obs. of  3 variables: #>   ..$ patent_id   : chr [1:1000] \"10000000\" ... #>   ..$ patent_title: chr [1:1000] \"Coherent LADAR using intra-pixel quadrature\".. #>   ..$ patent_date : chr [1:1000] \"2018-06-19\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_hits = 5,362,291"},{"path":"https://mustberuss.github.io/patentsview/index.html/index.html","id":"learning-more","dir":"","previous_headings":"","what":"Learning more","title":"An R Client to the PatentsView API","text":"Head package’s webpage info, including: getting started vignette first-time users. package also introduced rOpenSci blog post. -depth tutorial writing queries list basic examples Two examples data applications (e.g., brief analysis top assignees field databases)","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/cast_pv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast PatentsView data — cast_pv_data","title":"Cast PatentsView data — cast_pv_data","text":"cast data fields returned search_pv appropriate data types (e.g., date, numeric, etc.).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/cast_pv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast PatentsView data — cast_pv_data","text":"","code":"cast_pv_data(data)"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/cast_pv_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast PatentsView data — cast_pv_data","text":"data data returned search_pv. first element three-element result object got back search_pv. list length 1, one data frame inside . See examples.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/cast_pv_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast PatentsView data — cast_pv_data","text":"type object passed cast_pv_data.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/cast_pv_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast PatentsView data — cast_pv_data","text":"","code":"if (FALSE) {  fields <- c(\"patent_date\", \"patent_title\", \"patent_year\") res <- search_pv(query = \"{\\\"patent_id\\\":\\\"5116621\\\"}\", fields = fields) cast_pv_data(data = res$data) }"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/fieldsdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Fields data frame — fieldsdf","title":"Fields data frame — fieldsdf","text":"data frame containing names retrievable fields endpoints. can find data API's online documentation endpoint well (e.g., patents endpoint field list table).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/fieldsdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fields data frame — fieldsdf","text":"","code":"fieldsdf"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/fieldsdf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fields data frame — fieldsdf","text":"data frame following columns: endpoint endpoint field record field complete name field, including parent group applicable data_type field's input data type group group field belongs common_name field name without parent group structure","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Get endpoints — get_endpoints","title":"Get endpoints — get_endpoints","text":"function reminds user possible PatentsView API endpoints .","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get endpoints — get_endpoints","text":"","code":"get_endpoints()"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get endpoints — get_endpoints","text":"character vector names endpoint.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of retrievable fields — get_fields","title":"Get list of retrievable fields — get_fields","text":"function returns vector fields can retrieve given API endpoint (.e., fields can pass fields argument search_pv). can limit fields cover certain entity group(s) well (recommended, given large number possible fields endpoint).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of retrievable fields — get_fields","text":"","code":"get_fields(endpoint, groups = NULL)"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of retrievable fields — get_fields","text":"endpoint API endpoint whose field list want get. See get_endpoints list 7 endpoints. groups character vector giving group(s) whose fields want returned. value NULL indicates want endpoint's fields (.e., filter field list based group membership). See field tables located online see groups can specify given endpoint (e.g., patents endpoint table), use fieldsdf table (e.g., unique(fieldsdf[fieldsdf$endpoint == \"patent\", \"group\"])).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of retrievable fields — get_fields","text":"character vector field names.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of retrievable fields — get_fields","text":"","code":"# Get all assignee-level fields for the patents endpoint: fields <- get_fields(endpoint = \"patent\", groups = \"assignees\")  # ...Then pass to search_pv: if (FALSE) {  search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-04\"}}',   fields = fields ) } # Get all patent and assignee-level fields for the patents endpoint: fields <- get_fields(endpoint = \"patent\", groups = c(\"assignees\", \"patent\"))  if (FALSE) { # ...Then pass to search_pv: search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-04\"}}',   fields = fields ) }"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_ok_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OK primary key — get_ok_pk","title":"Get OK primary key — get_ok_pk","text":"function suggests value use pk argument unnest_pv_data, based endpoint searched. return potential unique identifier given entity (.e., given endpoint). example, return \"patent_id\" endpoint = \"patents\".","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_ok_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OK primary key — get_ok_pk","text":"","code":"get_ok_pk(endpoint)"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_ok_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OK primary key — get_ok_pk","text":"endpoint endpoint like know potential primary key .","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_ok_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OK primary key — get_ok_pk","text":"name primary key (pk) pass unnest_pv_data.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/get_ok_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OK primary key — get_ok_pk","text":"","code":"get_ok_pk(endpoint = \"inventor\") # Returns \"inventor_id\" #> [1] \"inventor_id\" get_ok_pk(endpoint = \"cpc_group\") # Returns \"cpc_group_id\" #> [1] \"cpc_group_id\""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/patentsview-package.html","id":null,"dir":"Reference","previous_headings":"","what":"patentsview: An R Client to the 'PatentsView' API — patentsview-package","title":"patentsview: An R Client to the 'PatentsView' API — patentsview-package","text":"Provides functions simplify 'PatentsView' API (https://patentsview.org/apis/purpose) query language, send GET POST requests API's twelve endpoints, parse data comes back.","code":""},{"path":[]},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/patentsview-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"patentsview: An R Client to the 'PatentsView' API — patentsview-package","text":"Maintainer: Christopher Baker chriscrewbaker@gmail.com","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/qry_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"List of query functions — qry_funs","title":"List of query functions — qry_funs","text":"list functions make easy write PatentsView queries. See details section list 14 functions, well writing queries vignette details.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/qry_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of query functions — qry_funs","text":"","code":"qry_funs"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/qry_funs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of query functions — qry_funs","text":"object class list length 16.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/qry_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of query functions — qry_funs","text":"object class pv_query. basically just simple list print method attached .","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/qry_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of query functions — qry_funs","text":"1. Comparison operator functions 6 comparison operator functions work fields type integer, float, date, string: eq - Equal neq - equal gt - Greater gte - Greater equal lt - Less lte - Less equal 2 comparison operator functions work fields type string: begins - string begins value string contains - string contains value string 3 comparison operator functions work fields type fulltext: text_all - text contains words value string text_any - text contains words value string text_phrase - text contains exact phrase value string 2. Array functions 2 array functions: - members array must true - one member array must true 3. Negation function 1 negation function: - comparison true","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/qry_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of query functions — qry_funs","text":"","code":"qry_funs$eq(patent_date = \"2001-01-01\") #> {\"_eq\":{\"patent_date\":\"2001-01-01\"}}  qry_funs$not(qry_funs$eq(patent_date = \"2001-01-01\")) #> {\"_not\":{\"_eq\":{\"patent_date\":\"2001-01-01\"}}}"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/retrieve_linked_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Linked Data — retrieve_linked_data","title":"Get Linked Data — retrieve_linked_data","text":"endpoints now return HATEOAS style links get data. E.g., inventors endpoint may return link : \"https://search.patentsview.org/api/v1/inventor/252373/\"","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/retrieve_linked_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Linked Data — retrieve_linked_data","text":"","code":"retrieve_linked_data(url, api_key = Sys.getenv(\"PATENTSVIEW_API_KEY\"), ...)"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/retrieve_linked_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Linked Data — retrieve_linked_data","text":"url link returned API previous call. api_key API key. See  info creating key. ... Arguments passed along httr's GET POST function.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/retrieve_linked_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Linked Data — retrieve_linked_data","text":"list following three elements: data list one element - named data frame containing data returned server. row data frame corresponds single value primary entity. example, search assignees endpoint, data frame assignee-level, row corresponds single assignee. Fields assignee-level returned list columns. query_results Entity counts across pages output (just page returned ). request Details HTTP request sent server. set all_pages = TRUE, get sample request. words, given multiple requests multiple calls made server (one page results).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/retrieve_linked_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Linked Data — retrieve_linked_data","text":"","code":"if (FALSE) {  retrieve_linked_data(   \"https://search.patentsview.org/api/v1/cpc_group/G01S7:4811/\"  ) }"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/search_pv.html","id":null,"dir":"Reference","previous_headings":"","what":"Search PatentsView — search_pv","title":"Search PatentsView — search_pv","text":"function makes HTTP request PatentsView API data matching user's query.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/search_pv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search PatentsView — search_pv","text":"","code":"search_pv(   query,   fields = NULL,   endpoint = \"patent\",   subent_cnts = FALSE,   mtchd_subent_only,   page,   per_page = 1000,   all_pages = FALSE,   sort = NULL,   method = \"GET\",   error_browser = NULL,   api_key = Sys.getenv(\"PATENTSVIEW_API_KEY\"),   ... )"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/search_pv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search PatentsView — search_pv","text":"query query API use filter records. query can come one following forms: character string valid JSON.  E.g., '{\"_gte\":{\"patent_date\":\"2007-01-04\"}}' list converted JSON search_pv.  E.g., list(\"_gte\" = list(\"patent_date\" = \"2007-01-04\")) object class pv_query, create calling one functions found qry_funs list...See writing queries vignette details. E.g., qry_funs$gte(patent_date = \"2007-01-04\") fields character vector fields want returned . value NULL indicates default fields returned. Acceptable fields given endpoint can found API's online documentation (e.g., check field list patents endpoint) viewing fieldsdf data frame (View(fieldsdf)). can also use get_fields list fields available given endpoint. endpoint web service resource wish search. Use get_endpoints() list available endpoints. subent_cnts Non-matched subentities always returned new version API mtchd_subent_only always FALSE new version API. page page number results returned. per_page number records returned per page. value can high 1,000 (e.g., per_page = 1000). all_pages want download possible pages output? all_pages = TRUE, value per_page ignored. sort named character vector name indicates field sort value indicates direction sorting (direction either \"asc\" \"desc\"). example, sort = c(\"patent_id\" =  \"asc\") sort = c(\"patent_id\" = \"asc\", \"patent_date\" =  \"desc\"). sort = NULL (default) means sort results. must include fields wish sort fields. method HTTP method want use send request. Possible values include \"GET\" \"POST\". Use POST method query long (say, 2,000 characters length). error_browser  api_key API key. See  info creating key. ... Arguments passed along httr's GET POST function.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/search_pv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search PatentsView — search_pv","text":"list following three elements: data list one element - named data frame containing data returned server. row data frame corresponds single value primary entity. example, search assignees endpoint, data frame assignee-level, row corresponds single assignee. Fields assignee-level returned list columns. query_results Entity counts across pages output (just page returned ). request Details HTTP request sent server. set all_pages = TRUE, get sample request. words, given multiple requests multiple calls made server (one page results).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/search_pv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search PatentsView — search_pv","text":"","code":"if (FALSE) {  search_pv(query = '{\"_gt\":{\"patent_year\":2010}}')  search_pv(   query = qry_funs$gt(patent_year = 2010),   fields = get_fields(\"patent\", c(\"patent\", \"assignees\")) )  search_pv(   query = qry_funs$gt(patent_year = 2010),   method = \"POST\",   fields = \"patent_id\",   sort = c(\"patent_id\" = \"asc\") )  search_pv(   query = qry_funs$eq(inventor_name_last = \"Crew\"),   endpoint = \"inventor\",   all_pages = TRUE )  search_pv(   query = qry_funs$contains(assignee_individual_name_last = \"Smith\"),   endpoint = \"assignee\" )  search_pv(   query = qry_funs$contains(inventors.inventor_name_last = \"Smith\"),   endpoint = \"patent\",   config = httr::timeout(40) ) }"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/unnest_pv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest PatentsView data — unnest_pv_data","title":"Unnest PatentsView data — unnest_pv_data","text":"function converts single data frame subentity-level list columns multiple data frames, one entity/subentity. multiple data frames can merged together using primary key variable specified user (see relational data chapter \"R Data Science\" -depth introduction joining tabular data).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/unnest_pv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest PatentsView data — unnest_pv_data","text":"","code":"unnest_pv_data(data, pk = get_ok_pk(names(data)))"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/unnest_pv_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest PatentsView data — unnest_pv_data","text":"data data returned search_pv. first element three-element result object got back search_pv. list length 1, one data frame inside . See examples. pk column/field name link data frames together. unique identifier primary entity. example, used patents endpoint call search_pv, specify pk = \"patent_id\". identifier included fields vector called search_pv. can use get_ok_pk suggest potential primary key data.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/unnest_pv_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest PatentsView data — unnest_pv_data","text":"list multiple data frames, one entity/subentity. data frame pk column , can link tables together needed.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/unnest_pv_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest PatentsView data — unnest_pv_data","text":"","code":"if (FALSE) {  fields <- c(\"patent_id\", \"patent_title\", \"inventors.inventor_city\", \"inventors.inventor_country\") res <- search_pv(query = '{\"_gte\":{\"patent_year\":2015}}', fields = fields) unnest_pv_data(data = res$data, pk = \"patent_id\") }"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/with_qfuns.html","id":null,"dir":"Reference","previous_headings":"","what":"With qry_funs — with_qfuns","title":"With qry_funs — with_qfuns","text":"function evaluates whatever code pass environment qry_funs list. allows cut typing writing queries. want cut typing even , can try assigning qry_funs list global environment : list2env(qry_funs, envir = globalenv()).","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/with_qfuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"With qry_funs — with_qfuns","text":"","code":"with_qfuns(code, envir = parent.frame())"},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/with_qfuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"With qry_funs — with_qfuns","text":"code Code evaluate. See example. envir R look objects present code present qry_funs.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/with_qfuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"With qry_funs — with_qfuns","text":"result code - .e., query.","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/reference/with_qfuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"With qry_funs — with_qfuns","text":"","code":"qry_funs$and(   qry_funs$gte(patent_date = \"2007-01-01\"),   qry_funs$text_phrase(patent_abstract = c(\"computer program\")),   qry_funs$or(     qry_funs$eq(inventors.inventor_name_last = \"Ihaka\"),     qry_funs$eq(inventors.inventor_name_last = \"Chris\")   ) ) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-01-01\"}},{\"_text_phrase\":{\"patent_abstract\":\"computer program\"}},{\"_or\":[{\"_eq\":{\"inventors.inventor_name_last\":\"Ihaka\"}},{\"_eq\":{\"inventors.inventor_name_last\":\"Chris\"}}]}]}  #...With it, this becomes: with_qfuns(  and(    gte(patent_date = \"2007-01-01\"),    text_phrase(patent_abstract = c(\"computer program\")),    or(      eq(inventors.inventor_name_last = \"Ihaka\"),      eq(inventors.inventor_name_last = \"Chris\")    )  ) ) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-01-01\"}},{\"_text_phrase\":{\"patent_abstract\":\"computer program\"}},{\"_or\":[{\"_eq\":{\"inventors.inventor_name_last\":\"Ihaka\"}},{\"_eq\":{\"inventors.inventor_name_last\":\"Chris\"}}]}]}"},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"patentsview-030-2021-09-03","dir":"Changelog","previous_headings":"","what":"patentsview 0.3.0 (2021-09-03)","title":"patentsview 0.3.0 (2021-09-03)","text":"CRAN release: 2021-09-25","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"misc-0-3-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.3.0 (2021-09-03)","text":"package now using new HTTPS endpoints (#17) list queryable fields updated with_qfuns() now find objects calling environment (@jcheng5, #20) Vignettes pre-computed (#23) issue fixed query strings weren’t properly URL-encoded (#24) Adhoc logic added handle API throttling","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"patentsview-022-2019-01-23","dir":"Changelog","previous_headings":"","what":"patentsview 0.2.2 (2019-01-23)","title":"patentsview 0.2.2 (2019-01-23)","text":"CRAN release: 2019-01-28","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"misc-0-2-2","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.2.2 (2019-01-23)","text":"Vignettes removed package CRAN builds don’t fail API ","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"patentsview-021-2018-03-05","dir":"Changelog","previous_headings":"","what":"patentsview 0.2.1 (2018-03-05)","title":"patentsview 0.2.1 (2018-03-05)","text":"CRAN release: 2018-03-14","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"misc-0-2-1","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.2.1 (2018-03-05)","text":"Examples hit API wrapped \\dontrun{} CRAN doesn’t request fixes package API ","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"patentsview-020-2018-02-08","dir":"Changelog","previous_headings":"","what":"patentsview 0.2.0 (2018-02-08)","title":"patentsview 0.2.0 (2018-02-08)","text":"CRAN release: 2018-02-09","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"patentsview 0.2.0 (2018-02-08)","text":"cast_pv_data() function added convert data types data returned search_pv() Additional fields added API (e.g., fields starting forprior_, examiner_)","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"misc-0-2-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.2.0 (2018-02-08)","text":"Additional error handler added locations endpoint (@mustberuss, #11) error_browser option deprecated","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"patentsview-010-2017-05-01","dir":"Changelog","previous_headings":"","what":"patentsview 0.1.0 (2017-05-01)","title":"patentsview 0.1.0 (2017-05-01)","text":"CRAN release: 2017-07-12","code":""},{"path":"https://mustberuss.github.io/patentsview/index.html/news/index.html","id":"new-functions-0-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"patentsview 0.1.0 (2017-05-01)","text":"search_pv added send requests PatentsView API qry_funs list added functions help users write queries get_fields get_endpoints added quickly get possible field names endpoints, respectively unnest_pv_data added unnest data frames returned data","code":""}]
