---
title: "API Changes"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{API Changes}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, 
  comment = "#>", 
  warning = FALSE,
  message = FALSE
)
```

In July of 2021 the Patentsview API team announced [upcoming API changes]( https://patentsview.org/data-in-action/whats-new-patentsview-july-2021).  This page will explain the necessary changes and additions to the 
R package.  Note that these are **breaking changes**, existing scripts will no longer run as-is using the the new version of the R package which uses the new version of the API.
As noted below, the new version of the R package handles some of the changes for users.

One change to note, the API team changed the name of the API.  PatentsView's Search API is now the PatentSearch API, as announced [here](https://search.patentsview.org/docs/#naming-update). 
The R package will retain its name, continue to use library(patentsview) as before.

## Summary of Pertinent API Changes

Listed here are the API changes that matter to users of the original version of the R package (which used the original version 
of the API).  Toward the bottom of this page are additional API changes what would only matter if you called the API 
directly or wanted to write a python library for the API. 

* Probably most importantly, the current shutdown date for the original version of the API
is February 12, 2025, as communicated in the August 2024 newsletter.
* An [API key](#api-key-required) is now required.
* All fields can be queried now and there is seemingly [no distinction](#operators) between using string and full text operators now, with a new [case sensitivity caveat](#case-sensitivity-caveat) though.  Note that now some
fields are returned in nested objects and would need to be fully qualified in the query parameter.  Ex. ```search_pv(qry_funs$begins(cpc_current.cpc_group_id="A01B1/00"))```

  In the fields parameter, nested fields can be fully qualified or a new API shorthand can be used, where group names can specified.
When group names are used, all of the group's nested fields will be returned by the API.  Ex. the new version 
of the API and R package will accept fields=c("assignees") when using the patent endpoint and all nested assignees
fields will be returned by the API.  This would be similar to `get_fields("patent", groups=c("assignees"))` except that it's the API deciding what fields to return
(in this case, all of the assignees fields).
  
* <a name="unbounded"> A result set's size seems unbounded now, you can now retrieve more than 100,000 rows. You'd need to be careful when setting all_pages = TRUE
as the R package will page until the entire result set is retrieved which could be a million or more rows. 
Note total_hits, in the previous version of the API this was capped at 100,000 rows.
```{r}
library(patentsview)
search_pv('{"patent_type":"utility"}', all_pages = FALSE )
```

* Endpoint Changes
   - nber_subcategories went away- it was an endpoint in the original version of the API
   - Endpoints are now singular, ex. patent not patents.  The returned entities are still plural for the most part.
   - Now there are [27 endpoints](#endpoints), up from the original 7
&nbsp;  

* Comparison of the old and new attributes that can be sent to the API in its o: (options)
parameter via search_pv().  Note that the old parameters are now deprecated.

     |Original API|New Version| Purpose|
     |------------|-----------|--------|
     | per_page (max 10,000)  | size (max 1,000)     |  maximum number of rows to return on each request |
     | page       | after     |  page through large result sets |
     | subent_cnts|           |  whether the query results should include the total counts of unique subentities|
     | mtchd_subent_only|     | whether a query should return all related subentities or just those that match query criteria.|


## Additional R Package Changes <a name="r-package-changes">

These changes were also made to the R package, in addition to the 
[API changes](#summary-of-the-api-changes) outlined above and the [Other API Changes](#other-api-changes) below

* The R package changed internally from using httr to httr2.  This only affects users if 
they passed additional arguments (...) to search_pv().  Previously if they passed config = httr::timeout(40)
they'd now pass timeout = 40 (name-value pairs of valid curl options, as found in curl::curl_options() see [req_options](https://httr2.r-lib.org/reference/req_options.html))

* Now that the R package is using httr2, users can make use of its last_request() method to see what was sent to the API.  This could be useful when trying to fix an invalid request.  Also fun would be seeing the raw API response.
```
httr2::last_request()
httr2::last_response()
httr2::last_response() |> httr2::resp_body_json() 
```


* Two methods were added
   + HATEOAS and sample links can be retrieved using [retrieve_linked_data()](#HATEOAS)
   + qry_funs$in_range()
```{r}
range_query <- qry_funs$in_range(patent_date=c("1970-01-01","1983-02-28")) 

# which will generate this, so you don't have to do it by hand
range_query 

# or this
range_query <- qry_funs$in_range(patent_year=c(2010, 2021))

range_query
```
* The ropensci blog post that announced the original version of the R package was [reworked](ropensci-blog-post.html) to use the new version of the R package and API
* A hex sticker was created using GuangchuangYu's [hexSticker](https://github.com/GuangchuangYu/hexSticker)

## Swagger UI Page <a name="swagger-ui-page"></a>
The Patentsview API team has provided a Swagger UI page for the new version of the API 
at https://search.patentsview.org/swagger-ui/. How cool is that?
Think of it as an online version of Postman already loaded with the API's endpoints and returns. 
Each field listed in the 200 response sections could be requested in the 
fields parameter and each field is supposed to be queryable (usable in the query
parameter).  The Swagger UI page can be used to make requests, if you have an API key 
to enter in the authorization screen.  The Swagger UI definition at
https://search.patentsview.org/static/openapi.json can be imported into Postman to give
you a nicely loaded collection for the new version of the API. You'll just need to set 
a global variable PVIEW_KEY and set the authorization's value to {{PVIEW_KEY}} to your API key. 

## Other API Changes <a name="other-api-changes"></a>

These API changes would only matter if you want to call the API directly or want to write a python library for the API etc.
Or maybe you're on the receiving end of a PR and need to know about all of the API's changes.

* These options parameters went away: matched_subentities_only, subent_cnts and page (paging now uses 'after' instead of 'page')
* Now the API's response is always JSON.  The original version of the API
had a 'format' parameter that defaulted to json but could be set to xml.  The original R package
did not expose this parameter so your script won't know the difference (unless you were calling the
API directly).

* Changes the updated R package handles for users:
   - The API now [throttles requests](#throttling).  The R package retries throttled requests.
   - The API's [paging](#a-note-on-paging) is completely different, but to users, all_pages=TRUE still works the same (however, note
the possibly unbounded result set size mentioned above).
   - The API change says that POST requests will need to send JSON data (instead of string representation of JSON). A Content-Type: application/json header was added.
   - The subdomain of the API changed from https://api.patentsview.org/ to https://search.patentsview.org and the paths to the endpoints changed.  
   - The order the fields are returned by the API has changed
   ```
     # Response body now
     {
       "error": false,
       "count": 1,
       "total_hits": 1,
       "patent": [...]
     }

     # Original response

     {
       "patents": [...],
       "count": 1,
       "total_patent_count": 1
     }
     ```
     Note that now total_hits comes back from all endpoints, previously there was an endpoint 
specific count, like total_patent_count.  Again, all of this is handled for you
by the R package.  The way total_hits comes back from the R package remains unchanged.

```{r}
   result <- search_pv('{"patent_id": "11530080"}')
   print (result$query_results$total_hits)
```

## Details of the API changes

### An API Key is required <a name="api-key-required"></a>
Perhaps the most important change, without an API key your queries will be rejected.  Request an API key using this link: https://patentsview.org/apis/keyrequest  Once you have one, you'll need to set an environmental variable PATENTSVIEW_API_KEY to the value of your API key for the R package to use.

The user's API key needs to be sent on all requests
```
api_key = Sys.getenv("PATENTSVIEW_API_KEY")
httr::add_headers("X-Api-Key" = api_key)
```

### Endpoints <a name="endpoints">
 Now there are 27 endpoints, up from the original 7, and each returns a smaller, more specific data structure pertinent to that endpoint. As an example, previously the inventor endpoint could return assignee information, it no longer does that.  The exception is the patent endpoint.  It now can return assignees, inventors, cpc_current along with patent specific fields.  Note that some new endpoints are nested under patent/ and one is under publication/

1. There are 19 totally new endpoints
   -  /api/v1/g_brf_sum_text/
   -  /api/v1/g_claim/
   -  /api/v1/g_detail_desc_text/
   -  /api/v1/g_draw_desc_text/
   -  /api/v1/pg_brf_sum_text/
   -  /api/v1/pg_claim/
   -  /api/v1/pg_detail_desc_text/
   -  /api/v1/pg_draw_desc_text/
   -  /api/v1/ipc/
   -  /api/v1/uspc_subclass/
   -  /api/v1/patent/attorney/
   -  /api/v1/patent/foreign_citation/
   -  /api/v1/patent/otherreference/ (not currently working)
   -  /api/v1/patent/rel_app_text/
   -  /api/v1/patent/us_application_citation/ 
   -  /api/v1/patent/us_patent_citation/
   -  /api/v1/publication/rel_app_text/
   -  /api/v1/publications/
   -  /api/v1/wipo/
2. Five of the original API's endpoints now have singular names but lighter responses and fewer queryable fields as mentioned above.  
   -  /api/v1/assignee/
   -  /api/v1/inventor/
   -  /api/v1/location/
   -  /api/v1/patent/
   -  /api/v1/uspc_mainclass/
3. The original CPC endpoint has a new name and there are two new CPC endpoints
   -  /api/v1/cpc_class/
   -  /api/v1/cpc_subclass/
   -  /api/v1/cpc_group/
4. The nber_subcategory endpoint seems to be gone now.

#### Things to note <a name="things-to-note">

1. Currently some endpoints do not return all the attributes listed in the API’s OpenAPI object. Some throw 500 errors when requested[^1] (see test-api-bugs.R)
1. There are two rel_app_text endpoints, one under patent/ and one under publication/ They both return rel_app_texts entities
1. Some endpoints now return [HATEOAS links](#HATEOAS)
1. Some fields went away, like rawinventor_first_name and rawinventor_last_name, and some have new names, most significantly, patent_number is now patent_id. Requesting patent_number will result in an error being thrown. Note also that the CPC related fields have new names, see the next section.


### HATEOAS Links <a name="HATEOAS">
Some of the returned fields are HATEOAS (Hypermedia as the Engine of Application State) links to retrieve more information about that field. Slightly funky is the cpc_current's cpc_group, returned by the patent endpoint.  Here the slash in the CPC is turned into a colon.  This is a peculiarity of two of the new convenience URLs (new endpoints that accept a single URL parameter) that shouldn't be noticeable in the R package, unless you are trying to infer the USPC and CPC values from the returned URLs, without actually calling back for this data.

Here we'll call the patent endpoint to get CPC fields for a particular patent, some of
the returned fields, like the cpc_group, are HATEOAS links:
 
```{r}

  query <- '{"patent_id": "11530080"}'
  fields <- get_fields('patent', groups = 'cpc_current', include_pk = TRUE)
  fields

  result <- search_pv(query, fields=fields)

  # As noted above, the CPC related fields aren't the same as they were in the
  # original version of the API.  Also note that not all requested fields were
  # returned and that _id-less, HATEOAS fields were returned.
  unnested <- unnest_pv_data(result$data)
  z <- lapply(names(unnested$cpc_current), function(x) {
     print(paste0(x,': ', unnested$cpc_current[[x]][[1]]))
  })

```
Note that going to these links in a browser will result in a 403 Unauthorized, as no API key is sent.

There is a new method in the R package to retrieve data from the HATEOAS links, just pass the returned
link and the R package will retrieve the data for you.  You can also pass an arbitrary link that hits 
the API.  This can be particularly useful if you want to see what the response would be from a link
found in the [API's documentation](https://search.patentsview.org/docs/docs/Search%20API/SearchAPIReference/). 

```{r}

library(patentsview)

pv_data <- retrieve_linked_data("https://search.patentsview.org/api/v1/cpc_group/G01S7:4865/")
pv_data

# Here we'll use an example URL from the documentation
# Note that going to that link in a browser will result in a 403 Unauthorized, as no API key is sent.
retrieve_linked_data('https://search.patentsview.org/api/v1/patent/?q={"patent_id":"7861317"}')

```

Note that when calling the cpc_group endpoint instead of using the HATEOAS link, you'd use a slash
instead of a colon. 

```{r}

search_pv('{"cpc_group_id": "A01B1/00"}', endpoint = 'cpc_group')

```

<a name="slight-weirdness">Slight weirdness</a>/sleight of hand where the returned field name looses the _id of the requested field

```{r}
  # We'll make a call to the patent endpoint to get inventor and assignee HATEOAS links
  res <- search_pv('{"patent_id":"10000000"}',
    fields = c("inventors.inventor_id", "assignees.assignee_id")
  )

  # but note that the fields came back without the _id
  print(res$data$patents$assignees[[1]]$assignee) # not $assignee_id as requested

  print(res$data$patents$inventors[[1]]$inventor) # not $inventor_id as requested

```

### API Throttling <a name="throttling"></a>
The API will now allow 45 requests per minute, making more requests will anger the API.  It will send back an error code with a header indicating how many seconds to wait before sending more queries.  The R package will take care of this for you.  It will sleep for the required number of seconds before resubmitting your query, seamlessly to your script.

### A Note on Paging <a name="a-note-on-paging">
The API team changed [how paging works](https://search.patentsview.org/docs/docs/Search%20API/SearchAPIReference/#pagination) and there is an 
important subtlety that the R package handles for you.  This screams for a python library so python 
users don't need to worry about this and throttling!  Here's a comment in search-pv.R that tries 
to explain the danger.
```
  # Here we ignore the user's sort and instead have the API sort by the primary
  # key for the requested endpoint.  This simplifies the paging's after parameter.
  # If we call the API with more than a primary sort, the after parameter would
  # have to be an array of all the sort fields' last values.
  # After we've retrieved all the data we'll sort in R using the sort the user requested

  # Doing this also protects users from needing to know the peculiarities
  # of the API's paging.  Example: if a user requests a sort of
  # [{"patent_date":"asc"}], on paging the after parameter may skip
  # to the next issue date before having retured all the data for the last
  # patent_date in the previous request - depending on where the
  # patent_dates change relative to the API's page breaks.
  # (Say the last patent in a retrieved page is the first patent
  # of a particular date, we wouldn't want the after parameter to
  # to begin the next page of data after this date.)

```

See the paging discussion in this [PR](https://github.com/ropensci/patentsview/pull/29#discussion_r1059137212)

### String and Full Text Operators <a name="operators">
The Tip below "Syntax" in the API's [documentation](https://search.patentsview.org/docs/docs/Search%20API/SearchAPIReference/#syntax) says:

> When working with text data fields, wherever possible, we recommend using _text* operators over the 
> _contains and _begins operator. The text operators treat these fields as full text data and hence 
> are more performant. The "full text" fields are identified in the API Endpoint specification 
> with the value "text" for the data type.

Not sure if that only applies to the beta endpoints or not.  Also not sure what to make of the
result set size differences[^2], total_hits, noting that no errors were thrown by the API:

hitting the patent endpoint:
```{r}
query1 <- '{"_contains":{"patent_title":"dog"}}'
query2 <- '{"_text_any":{"patent_title":"dog"}}'

search_pv(query1)

search_pv(query2)

```

hitting the g_brf_sum_text endpoint:
```{r}
query1 <- '{"_contains":{"summary_text":"paper cup holder"}}'
query2 <- '{"_text_phrase":{"summary_text":"paper cup holder"}}'

search_pv(query1, endpoint="g_brf_sum_text")

search_pv(query2, endpoint="g_brf_sum_text")
```



### Case Sensitivity Caveat <a name="case-sensitivity-caveat">
The original version of the API seemed to be case insensitive.  Not sure if this is a bug or feature[^3]
in the new version of the API but it's something to be aware of.

As you'll see from the queries below, the two forms of equal now seem to be case sensitive.

```{r}

result <- search_pv('{"assignee_organization": "Johnson & Johnson International"}', endpoint="assignee")
print (result$query_results$total_hits)

result <- search_pv('{"assignee_organization": "johnson & Johnson International"}', endpoint="assignee")
print (result$query_results$total_hits)

result <- search_pv('{"_eq":{"assignee_organization": "Johnson & Johnson International"}}', endpoint="assignee")
print (result$query_results$total_hits)

result <- search_pv('{"_eq":{"assignee_organization": "johnson & Johnson International"}}', endpoint="assignee")
print (result$query_results$total_hits)

```

[^1]: Observation sent to the API team.
[^2]: Observation sent to the API team.
[^3]: Observation sent to the API team.
[^4]: Observation sent to the API team.