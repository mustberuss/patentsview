---
title: "Converting an Existing Script"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Converting an Existing Script}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE,
  message = FALSE
)
```

## Necessary Script Changes

If you have a script that worked with the original R package and original version of the API, chances are it will need some possibly substantial changes before it will work with the new version of the R package and API.

## The One Required Change
First off you'll need to [request an API key](https://patentsview.org/apis/keyrequest) and then set the environmental variable PATENTSVIEW_API_KEY to the value of your API key.  Ex. set PATENTSVIEW_API_KEY=My_api_key  Without a valid API key, all your calls will be rejected by the API.  There would be a small chance that that is all that is needed to convert a simple script to use the new R package and new version of the API.

## The New Throttling Limit
Another new thing is a throttling limit. The new version of the API only allows an individual API key to make 45 calls per minute.  The call that exceeds that limit is rejected but does return the number of seconds to wait before calls would be allowed again.  Fortunately, the R package handles this for you!  Your script will be chugging along and if the API should return a throttling response, the R package will sleep for the required number of seconds before automatically resending your query!  The only thing you may notice, besides a warning message, it that the script will pause when throttled before it picks right back up again.

The new versions of the API's endpoints are less Swiss Army Knife-like than before, where you could get nearly any data field from any endpoint.  Now they have substantially lighter responses and they generally focus on data pertinent to that endpoint.  In other words, you can only get uspc fields from the uspc endpoints.  This may mean you'll have to make multiple calls to different endpoints to get the same data the old version of API used to return in a single call.

Take a look at the top [assignees application](top-assignees.html). It has to blend together information from separate calls that used to be returned by a single call. This may push your dplyr knowlegde to the limit.

## Changed Field Names and Types
The fields selected in the original stript not be available from the new version's endpoints. Fields like the government interests are no longer available (see https://patentsview.org/data-in-action/whats-new-patentsview-july-2021). Also, some attributes have new names, like name_last in the nested inventor object.  Now in the fields parameter it would be specified as "inventor.name_last" where formerly it was "inventor_last_name" when using the patents endpoint.

Also note that some field's types have changed, meaning you'll need to use different operators within your query.  Ex. assignee.organization is now a full text field, formerly it was a string.  

```{r}

library(patentsview)

# Before you could do a 
qry_funs$contains(assignee_organization="Rice University")

# now you would have to do 
qry_funs$text_phrase(assignees.assignee_organization="Rice University")

```


## Additions to the R Package

```{r}
# There is a new in_range query function

range <- qry_funs$in_range(patent_date=c("1970-01-01","1983-02-28")) 

# which will generate this, so you don't have to do it by hand
range

```

## Conclusion

So there you have it, our attempt at listing what's changed and what to do about it.  [Request](https://patentsview.org/apis/keyrequest) an API key and get going with the new version of the R package! The two API versions will coexist for a while but API team plans to shutdown the original version of the API at the end of 2022.













