---
title: "Result Set Paging"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Result Set Paging}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE,
  message = FALSE
)
```

  Paging changed in the new version of the Patentsview API and R package.  This vignette tries to 
explain the subtleties that the R package handles for you and to show how to do custom paging.  

  The R package lets you make a single request of up to 1000 rows or to retrieve all rows,
with nothing in between, unless you do your own paging.  This might be important if you
want to retrieve a few thousand utility patents without retrieving all 8 million of them.
Or maybe you want to iterate through search results page by page rather than retrieving
the entire data set and then iterating.
If you do your own paging, you'll need to be careful when choosing your sort parameter(s), as
shown in Example 2 and Example 3.

## Example 1

**Note: A recent API release changed paging when sorting by patent_id.**  We used to pass the unaltered 
last value we received.  Now we need to pad the patent_id to 8 characters in order to page through the whole result set.
This seems to be an intentional change, seemingly only needed for patent_id when paging, so 
```pad_patent_id()``` was added to the R package.

Here we'll retrieve 5000 utility patents using custom paging.

```{r}
library(patentsview)
library(dplyr)

# Lets get 5000 utility patents, 1000 at a time (the API's maximum rows per request)
requested_rows <- 1000
sort <- c("patent_id" = "asc")
query <- qry_funs$eq("patent_type" = "utility")
fields <- c("patent_id", "patent_date", "patent_title")

# The "after" parameter is explained a bit lower.  It's an Elasticsearch thing,
# and is the attrbute the new version of the API uses to page.  For now, just be 
# thankful that the R package handles this for you when you set all_pages = TRUE
after <- NULL
results <- list()

for (n in seq_len(5)) {
  after <- if(is.null(after)) after else pad_patent_id(after)
  print(paste("page", n, "after is", ifelse(is.null(after),"NULL",after)))

  page_n <- search_pv(query, fields = fields, sort = sort, 
    all_pages = FALSE, size = requested_rows, after = after)
   s <- names(sort)
   last_index <- nrow(page_n$data[[1]])
   after <- page_n$data[[1]][[s]][[last_index]] # the last value of the sort field
   results[[n]] = page_n$data
}

utility_sample <- as.data.frame(do.call(rbind, lapply(results, as.data.frame)))

str(utility_sample)

```

## Example 2

Here we will execute a query two different ways, first having the R package do
the paging, the second will be our misguided attempt to do the paging ourselves.

```{r}

fields <- c("patent_id", "patent_date", "patent_title")
sort <- c("patent_date" = "asc")
query <- qry_funs$in_range(patent_date=c("1976-01-01", "1976-01-31"))
query

r_pkg <- search_pv(query, sort = sort, fields = fields, all_pages = TRUE)

# note the number of rows returned
r_pkg$query_results$total_hits

```

Quick piece of trivia: with a handful of exceptions, most US patents were issued on a Tuesday.
Here are the counts by issue date for January 1976 to help illustrate why what we're
about to do will lead to trouble. (Note that the single patent issued on 1976-01-25 is a mistake in the 
patentsview database but we need it here so the sum will match r_pkg\$query_results\$total_hits
just displayed)

```{r}
   issue_dates = unique(r_pkg$data$patents$patent_date)
   counts <- lapply(issue_dates, function(issue_date) {
      query <- qry_funs$eq(patent_date = issue_date)
      res <- search_pv(query)
      weekday <-  weekdays(as.Date(issue_date))
      print(paste(res$query_results$total_hits, issue_date, weekday))
      res$query_results$total_hits
   })
   sum(unlist(counts))
```

Now we'll try to do our own paging but, as you might notice, we'll run into trouble using patent_date
as the sort field (and thus the 'after' parameter we'll send to the API).

```{r}

after <- NULL
combined_data <- NULL
count <- 0
requested_rows <- 1000  # API's maximum rows per request

# these variables remain the same
sort <- c("patent_date" = "asc")
query <- qry_funs$in_range(patent_date=c("1976-01-01", "1976-01-31"))
fields <- c("patent_id", "patent_date", "patent_title")

# We'll continue to make requests until we get back an empty or partial
# response from the API
page <- 1

repeat {
  print(paste("page", page, "after is", ifelse(is.null(after), "NULL", after)))

  subsequent <- search_pv(query, sort = sort, all_pages = FALSE,
    fields = fields, size = requested_rows, after = after)

  # subsequent$data$patents is an empty list if we page too far
  returned_rows <- ifelse(length(subsequent$data$patents) == 0, 0, nrow(subsequent$data$patents))

  if(returned_rows > 0) {
     combined_data <- rbind(combined_data, subsequent$data$patents)
     count <- count + returned_rows 
     page <- page  + 1
  }

  # We're done if we got an empty or partial reply from the API
  if(returned_rows < requested_rows) {
     break
  }

  # Now to page we need to set the "after" attribute to where the
  # current results ended.  Its value is the last row's [[sort field]]. 
  # It would need to be an array of values if there are multiple sort fields
  s <- names(sort)[[1]]
  after <- subsequent$data[[1]][[s]][[returned_rows]]

}

print(paste("count is", count))
print(nrow(combined_data))

```

We ran into trouble since we chose patent_date as the sort field which
isn't unique row-wise in our result set as patent_id was in Example 1.  In most cases
when we set 'after' to the last patent_date of a page of results, we weren't done retrieving all 
of that date's patents.  (The page breaks aren't guaranteed to align with the patent_date
changes in the result set.  See the page boundary shown in next example if this isn't clear yet.)

The R package uses appropriate key(s) when 
```all_pages = TRUE```.  The sort key for an endpoint is generally
 ```get_ok_pk(endpoint)``` but, as the next example shows, sometimes a
secondary sort is required to guarantee row uniqueness (vital for paging via
the 'after' parameter, so the API properly picks up exactly where the previous page
of data left off).

After all the pages
have been retrieved, the R package sorts the data set as the user requested.
(This sorting methodology is inspired by the [Patentsview's python wrapper](https://github.com/PatentsView/PatentsView-APIWrapper)).
The lesson here is to pick a column, or pair of columns, that create row uniqueness to sort/page on.
The next example shows when a secondary sort is required.

## Example 3

Here we'll demonstrate that sometimes, in order to do custom paging, a secondary sort is
required.  Normally the R package handles this for its users when all_pages = TRUE.  It all has
to do with the way the API now handles paging, where the sort key(s) is/are used to determine the 'after'
parameter's value(s), instructing the API where the next page of results begins.  

Some of the new endpoints can return more than one row of data for their primary key.  They are
the endpoints that have a sequence parameter.  Sorting and thus paging by only the primary key 
at these endpoints can lead to trouble, like sorting by patent_date did in the second half of Example 2.

```{r}
  sequences <- fieldsdf[grepl("^[^.]*sequence",fieldsdf$field), c("endpoint", "field")]
  rownames(sequences) <- NULL
  pks <- lapply(sequences$endpoint, function(endpoint) {
     get_ok_pk(endpoint)
  })

  pk_col <- do.call("rbind", pks)
  rownames(pk_col) <- NULL

  sequences %>%
    mutate(pk=pk_col, .after=endpoint) %>%
    rename(secondary = field)
```

Ok, so here we'll do a minimalist custom paging with a secondary sort using the patent/us_patent_citation
endpoint.  The code is similar to what's in the [citation network vignette](citation-networks.html),
where we first learned that a primary sort is not always sufficient (requiring changes to the R package).


```{r}
# Write a query to pull patents assigned to the CPC code of "Y10S707/933"
query <- qry_funs$contains(cpc_current.cpc_group_id = "Y10S707/933")
pv_out <- search_pv(query = query, fields = c("patent_id"))
patent_ids <- pv_out$data$patents$patent_id

# We have to go against the patent_citiation endpoint now, these fields
# are no longer available from the patent endpoint

citing_query <- qry_funs$eq(patent_id = patent_ids)
cited_query <- qry_funs$eq(citation_patent_id = patent_ids)

# Create a list of fields to pull from the API
fields <- c(
  "patent_id",
  "citation_patent_id",
  "citation_sequence"
)

sort <- c("patent_id" = "asc", "citation_sequence" = "asc")

# Request the first page of results
res <- search_pv(citing_query,
  fields = fields, all_pages = FALSE,
  sort =  sort,
  endpoint = "patent/us_patent_citation", method = "POST", size = 1000
)

last_row <- nrow(res$data$us_patent_citations)
last_patent_id <- res$data$us_patent_citations$patent_id[[last_row]]
last_citation_sequence <- res$data$us_patent_citations$citation_sequence[[last_row]]
after <- c(last_patent_id, last_citation_sequence)
print(after)

# make our own request to get the second page of results, knowing that's it (1066 total rows)
remaining <- search_pv(citing_query,
  fields = fields, all_pages = FALSE,
  sort =  sort,
  after = after,
  endpoint = "patent/us_patent_citation", method = "POST", size = 1000
)

blend <- list(res$data[[1]], remaining$data[[1]])
blended <- list(do.call("rbind", c(blend, make.row.names = FALSE)))
names(blended) <- names(res$data)
str(blended)

```

Here's a quick look at the data around the page boundary to try to show
why we needed a secondary sort. It's not that we necessarily wanted a 
secondary sort, but it gives us the ability to use a second column
in the 'after' parameter.

```{r}
# ending of the first page of results
tail(res$data$us_patent_citations, n=3)

#  ***********  data page boundary ***********  

# start of the second page of results
head(remaining$data$us_patent_citations, n=3)

# end of the second page of results
tail(remaining$data$us_patent_citations, n=3)

# If the sort was only by patent_id, the second request would return
# zero rows since there aren't patent_ids 'after' 10095778
```
## Takeaways

Again, when `all_pages = TRUE` the R package handles all of this for you!  You'd only
need code like this if your use case requires custom paging.  The custom paging
takeaways are:

1. The original version of the API and R package used `per_page` and `page` to allow
users to page through result sets.  Those attributes are replaced by `size` and `after` in the
new version of the API and R package.
2. Your sort field(s) need to create row-wise uniqueness (hint only patent_date probably won't be good enough)
3. If patent_id is used as a sort field, its corresponding 'after' value needs padding, see how
```pad_patent_id()``` is used in Example 1
4. If there is a single sort field, the after parameter's value is the sort field's last value in
the result set (as in Example 1).
If there are multiple sort fields, the after parameter's value is a vector of their last values 
(as in Example 3).
	`