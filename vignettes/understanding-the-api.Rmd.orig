---
title: "Understanding the API"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Understanding the API}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, 
  comment = "#>", 
  warning = FALSE,
  message = FALSE
)
```

Oh, the interesting things you'll learn when you take the time to read the API documentation!
Here are gems gleaned from a [jupyter notebook](https://github.com/PatentsView/PatentsView-Code-Examples/blob/main/PatentSearch/0-patentsearch-api-demo.ipynb) in PatentsView's PatentsView-Code-Snippets
repo.

## Fields Shorthand
The notebook starts out fairly fluffy but things really get interesting really quickly.
See this under "constructing your query",  I don't remember seeing this anywhere else:

> Some endpoints contain groups of fields representing related entities connected to one of that
> endpoint's primary entity type; for example, the patent endpoint contains a field "inventors",
> which contains information on all inventors associated with any given patent. *The fields for
> related entities can be requested in the API request's fields parameter as a group by using the
> group name in the fields parameter*, or individually by specifying the required field as "{entity_type}.{subfield}".

Mind blown, so we can, for example, request all the nested application fields from the patent endpoint by simply requesting "application" in the fields list.  

The new version of the R package will let its users leverage this same "feature".  (Purists will probably frown upon using it, as they 
would with a select * in SQL.  It can be helpful to see exactly what fields the API can return, should the documentation
be lagging.)

```{r}
library(patentsview)

pat_res <- search_pv(qry_funs$eq(patent_id = "10568228"), fields=c("application"), method="POST")
pat_res$data$patent$application
pat_res$request

```

The results should be the same if we used ```fields=get_fields("patent", groups=c("application"))```.  The difference
is that in the case above, it's the API deciding what fields to return while in the get_fields() case, we parsed
the [API's OpenAPI object](https://search.patentsview.org/static/openapi.json) when building the R package to determine what fields can be requested.  The results 
could be different if the API's actual return is not in sync with the API's OpenAPI object.  Here we see that
the requests are different but the results are the same (we used POSTs so the requests are easier to read since they don't need to be urlencoded):

```{r}
app_fields <- get_fields("patent", groups=c("application"))
app_fields

pat_res <- search_pv(qry_funs$eq(patent_id = "10568228"), fields=app_fields, method="POST")
pat_res$data$patent$application

# the request here and the one above differ, but the results were the same!
pat_res$request

```
<a name="all-fields">
Now, when requesting all fields, `get_fields()` uses the API's shorthand notation
rather than explicitly calling out every field.  If it didn't do that, it would
be possible to get an error when doing a GET of every field at the patent endpoint.
It currently has 20 groups and 129 fields overall.

## Unexpected Results

Then, as if that wasn't enough, some non-obvious behavior appears under the second bullet point
under the "Queries using related entity fields" header:

> When applying multiple conditions to related-entity fields, a central entity record will be 
> returned if any combination of its related entities satisfy those conditions.

In their example, they use George Washington as an inventor.  Humorously, there are modern
inventors with that name!  Abraham Lincoln is also used as an inventor.  Good ol' Abe is the only
US president to receive a [patent](https://ppubs.uspto.gov/pubwebapp/external.html?db=USPAT&type=ids&q=(0006469).pn.) but
it's too early to be in the patentsview database and there are no modern Abraham Lincolns to be found
as inventors.

To demonstrate the API's not-exactly-intuitive behavior, we'll keep George as an inventor but substitute 
Thomas Jefferson for Abe, as there are inventors going by that famous name, though they aren't on nickels or
two dollar bills in the US.

```{r}
library(dplyr)

patents_query <- 
  with_qfuns(
    or(
      and(
        text_phrase(inventors.inventor_name_first = "George"),
        text_phrase(inventors.inventor_name_last = "Washington")
      ),
      and(
        text_phrase(inventors.inventor_name_first = "Thomas"),
        text_phrase(inventors.inventor_name_last = "Jefferson")
      )
    )
  )

patent_fields <-c("patent_id", "inventors.inventor_name_first", "inventors.inventor_name_last")
pat_res <- search_pv(patents_query, fields=patent_fields, endpoint="patent")
dl <- unnest_pv_data(pat_res$data)

# We got back all the inventors on the patents that met our search criteria.  We'll filter out
# the inventors that didn't strictly meet our criteria (they came along for the ride with
# the ones that met our criteria), we want the noted behavior to be clear.

display_inventors <- 
   dl$inventors %>%
   filter(grepl("^(George|Thomas)", inventor_name_first ) | grepl("^(Washington|Jefferson)", inventor_name_last))  %>%
   arrange(nchar(patent_id), patent_id)  # numeric sort on a string field

display_inventors

```

Now we'll hit the inventor endpoint with a similar query, as the jupyter notebook suggests.

```{r}

inventors_query <- 
  with_qfuns(
    or(
      and(
        text_phrase(inventor_name_first = "George"),
        text_phrase(inventor_name_last = "Washington")
      ),
      and(
        text_phrase(inventor_name_first = "Thomas"),
        text_phrase(inventor_name_last = "Jefferson")
      )
    )
  )

inventor_fields <- c("inventor_id","inventor_name_first","inventor_name_last")
inventor_res <- search_pv(inventors_query, fields=inventor_fields, endpoint="inventor")
dl2 <- unnest_pv_data(inventor_res$data)

actual_inventors <-
   dl2$inventors %>%
   arrange(inventor_name_last, inventor_name_first)

actual_inventors
```

Now, with actual_inventors' inventor_ids in hand, we'll ask the patent endpoint for their patents.
The results are quite different than what the first query returned. (These patents would 
have names matching at least one of our two famous forefathers.  The first query non-intuitively
matched names where the first and last name matches did not necessarily both occur on the same inventor.)

```{r}
id_query <- qry_funs$eq(inventors.inventor_id=actual_inventors$inventor_id)

# We need to pass fields since we're sorting (sort field has to be passed as a field)
# Without a sort we could rely on the default fields being returned if we liked

patent_fields <-c("patent_id", "inventors.inventor_name_first", "inventors.inventor_name_last")
pat_res <- search_pv(id_query, fields=patent_fields, sort=c("patent_id" = "asc"))

dl <- unnest_pv_data(pat_res$data)

# Also, the API's sort on patent_id, a string field, puts 10568228 first at the time of 
# this writing.  Would that be a bug or feature?  Below we'll apply our own sort
dl$patents[[1]][[1]]

# we'll repeat the same filter we used on the first query's results
display_inventors <- 
   dl$inventors %>%
   filter(grepl("^(George|Thomas)", inventor_name_first ) | grepl("^(Washington|Jefferson)", inventor_name_last))  %>%
   arrange(nchar(patent_id), patent_id)  # numeric sort on a string field


display_inventors

```

## Acknowledgment

Again, credit goes to the Patentsview API team for creating the cited jupyter notebook.  This is just portions of it
in R package form.  The repo doesn't have a stated license but when I checked, I was told:

> For the repo license we are looking at the [GNU General Public License v3](https://www.gnu.org/licenses/quick-guide-gplv3.html) (GPL3).

That is the same license as R itself so I don't think we've violated anything.  For extra fun check
out [Russ' fork](https://github.com/mustberuss/PatentsView-Code-Snippets/blob/master/07_PatentSearch_API_demo/PV%20PatentSearch%20API%20tutorial.ipynb).  There was no reply when I asked if they'd be receptive to a PR.
